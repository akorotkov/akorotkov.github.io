<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Count | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/count/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2018-05-21T20:42:15+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Full Text Search Made (Almost) Right in PostgreSQL 11]]></title>
    <link href="http://akorotkov.github.io/blog/2018/05/21/fulltext-search-made-almost-right/"/>
    <updated>2018-05-21T20:35:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2018/05/21/fulltext-search-made-almost-right</id>
    <content type="html"><![CDATA[<p>Long story short, using PostgreSQL 11 and <a href="https://github.com/postgrespro/rum">RUM index</a>
you can do both TOP-N query and COUNT(*) query for non-selective FTS queries without
fetching all the matching results from heap (and that is certainly much faster).
If you’re interested in details, then please read the detailed description below.</p>

<p>At November 1st 2017, Tome Lane committed a <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=7c70996e">patch</a>
enabling bitmap scans to behave like index-only scan when possible.
In particular, since PostgreSQL 11 COUNT(*) queries can be evaluated using
bitmap scans without accessing heap, when corresponding bit in visibility map
is set.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>commit 7c70996ebf0949b142a99c9445061c3c83ce62b3
</span><span class='line'>Author: Tom Lane &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#116;&amp;#103;&amp;#108;&amp;#064;&amp;#115;&amp;#115;&amp;#115;&amp;#046;&amp;#112;&amp;#103;&amp;#104;&amp;#046;&amp;#112;&amp;#097;&amp;#046;&amp;#117;&amp;#115;&quot;&gt;&amp;#116;&amp;#103;&amp;#108;&amp;#064;&amp;#115;&amp;#115;&amp;#115;&amp;#046;&amp;#112;&amp;#103;&amp;#104;&amp;#046;&amp;#112;&amp;#097;&amp;#046;&amp;#117;&amp;#115;&lt;/a&gt;
</span><span class='line'>Date:   Wed Nov 1 17:38:12 2017 -0400&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;Allow bitmap scans to operate as index-only scans when possible.
</span><span class='line'>
</span><span class='line'>If we don&#39;t have to return any columns from heap tuples, and there&#39;s
</span><span class='line'>no need to recheck qual conditions, and the heap page is all-visible,
</span><span class='line'>then we can skip fetching the heap page altogether.
</span><span class='line'>
</span><span class='line'>Skip prefetching pages too, when possible, on the assumption that the
</span><span class='line'>recheck flag will remain the same from one page to the next.  While that
</span><span class='line'>assumption is hardly bulletproof, it seems like a good bet most of the
</span><span class='line'>time, and better than prefetching pages we don&#39;t need.
</span><span class='line'>
</span><span class='line'>This commit installs the executor infrastructure, but doesn&#39;t change
</span><span class='line'>any planner cost estimates, thus possibly causing bitmap scans to
</span><span class='line'>not be chosen in cases where this change renders them the best choice.
</span><span class='line'>I (tgl) am not entirely convinced that we need to account for this
</span><span class='line'>behavior in the planner, because I think typically the bitmap scan would
</span><span class='line'>get chosen anyway if it&#39;s the best bet.  In any case the submitted patch
</span><span class='line'>took way too many shortcuts, resulting in too many clearly-bad choices,
</span><span class='line'>to be committable.
</span><span class='line'>
</span><span class='line'>Alexander Kuzmenkov, reviewed by Alexey Chernyshov, and whacked around
</span><span class='line'>rather heavily by me.
</span><span class='line'>
</span><span class='line'>Discussion: https://postgr.es/m/239a8955-c0fc-f506-026d-c837e86c827b@postgrespro.ru
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<!--more-->

<p>This commit might seem to be just one of planner and executor optimizations,
nice but doesn’t deserve much attention.  However, under detailed consideration
this patch appears to be significant improvement on the way of making fulltext
search in PostgreSQL to be done in the right way.</p>

<p>I’ve started working on FTS improvements in 2012.  That time I realized that GIN
index is good for selective FTS queries, when the number of matching results is
low.  See an example below: GIN did the great work by returning just few
dozens of matching rows very fast.  The rest of operations including rank
calculation and sorting are also fast, because they are made over very small
row set.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">exclusion</span> <span class="k">constraint</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">exclusion</span> <span class="k">constraint</span><span class="err">’</span><span class="p">))</span> <span class="k">DESC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                                                               <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">—————————————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="k">Limit</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">28</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">320</span><span class="p">.</span><span class="mi">142</span><span class="p">..</span><span class="mi">320</span><span class="p">.</span><span class="mi">149</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">7138</span> <span class="k">read</span><span class="o">=</span><span class="mi">7794</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Sort</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">320</span><span class="p">.</span><span class="mi">141</span><span class="p">..</span><span class="mi">320</span><span class="p">.</span><span class="mi">147</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Sort</span> <span class="k">Key</span><span class="p">:</span> <span class="p">(</span><span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="err">‘</span><span class="s1">&#39;’exclus’’ &amp;amp; ‘‘constraint’’’::tsquery)) DESC</span>
</span><span class='line'><span class="s1">         Sort Method: top-N heapsort  Memory: 38kB</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=7138 read=7794</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Heap Scan on pgmail  (cost=44.20..143.72 rows=25 width=784) (actual time=5.232..315.302 rows=3357 loops=1)</span>
</span><span class='line'><span class="s1">               Recheck Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">exclus</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="k">constraint</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">2903</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">7138</span> <span class="k">read</span><span class="o">=</span><span class="mi">7794</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail_fts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">44</span><span class="p">.</span><span class="mi">19</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">3</span><span class="p">.</span><span class="mi">689</span><span class="p">..</span><span class="mi">3</span><span class="p">.</span><span class="mi">689</span> <span class="k">rows</span><span class="o">=</span><span class="mi">3357</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘&#39;’</span><span class="n">exclus</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="k">constraint</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">11</span> <span class="k">read</span><span class="o">=</span><span class="mi">23</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">176</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">320</span><span class="p">.</span><span class="mi">213</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">15</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But the situation is different when FTS query is not selective, and number of
matching rows is high.  Then we have fetch all the matching rows from the heap,
rank them, and then sort.  And despite we only need TOP-10 of matching rows,
this query takes a lot of time.  See the example below: “Tom Lane” is for sure
non-selective query over PostgreSQL mailing lists.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">))</span> <span class="k">DESC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                                                                 <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————————————–</span>
</span><span class='line'> <span class="k">Limit</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">28</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">18110</span><span class="p">.</span><span class="mi">231</span><span class="p">..</span><span class="mi">18110</span><span class="p">.</span><span class="mi">236</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">1358323</span> <span class="k">read</span><span class="o">=</span><span class="mi">399077</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Sort</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">18110</span><span class="p">.</span><span class="mi">229</span><span class="p">..</span><span class="mi">18110</span><span class="p">.</span><span class="mi">231</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Sort</span> <span class="k">Key</span><span class="p">:</span> <span class="p">(</span><span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)) DESC</span>
</span><span class='line'><span class="s1">         Sort Method: top-N heapsort  Memory: 44kB</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=1358323 read=399077</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Heap Scan on pgmail  (cost=44.20..143.72 rows=25 width=784) (actual time=70.267..17895.628 rows=224568 loops=1)</span>
</span><span class='line'><span class="s1">               Recheck Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="k">Rows</span> <span class="n">Removed</span> <span class="k">by</span> <span class="k">Index</span> <span class="k">Recheck</span><span class="p">:</span> <span class="mi">266782</span>
</span><span class='line'>               <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">39841</span> <span class="n">lossy</span><span class="o">=</span><span class="mi">79307</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">1358323</span> <span class="k">read</span><span class="o">=</span><span class="mi">399077</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail_fts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">44</span><span class="p">.</span><span class="mi">19</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">63</span><span class="p">.</span><span class="mi">914</span><span class="p">..</span><span class="mi">63</span><span class="p">.</span><span class="mi">914</span> <span class="k">rows</span><span class="o">=</span><span class="mi">224568</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘&#39;’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">41</span> <span class="k">read</span><span class="o">=</span><span class="mi">102</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">131</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">18110</span><span class="p">.</span><span class="mi">376</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">16</span> <span class="k">rows</span><span class="p">)(</span><span class="mi">15</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>How this situation can be improved?  If we would get results from index already
pre-ordered by rank, then we would be able to evaluate TOP-N query
without fetching the whole set of matching rows from heap.  Unfortunately,
that appears to be impossible for GIN index, which doesn’t contain enough of
information to calculate the rank.  However, once we have additional information
about terms positions in the index, it might work.  That would be enough for
raking fulltext results inside the index.</p>

<p><img class="no-border center 2x" src="/images/gin2rum.png" width="614" height="134"></p>

<p>Thus, I’ve <a href="https://www.postgresql.org/message-id/CAPpHfdtSt47PpRQBK6OawHePLJk8PF-wNhswaUpre7_%2Bcc_kmA%40mail.gmail.com">a set of patches</a>
to the GIN index.  Some of improvements were committed to 9.4, including
<a href="http://www.sai.msu.su/~megera/postgres/talks/329_PGCon2014-GIN.pdf">index compression and index search optimization</a>.  However, additional information storage for GIN
index wasn’t committed, because it changes GIN index structure too much.</p>

<p>Fortunately, we have
<a href="blog/2016/04/06/extensible-access-methods/">extensible index access methods</a>
since PostgreSQL 9.6.  And that enables us to implement things, which wasn’t
accepted to GIN and even more, as a separate index access method
<a href="https://github.com/postgrespro/rum">RUM</a>.  Using RUM, one can execute TOP-N
FTS query much faster without fetching all the matching rows from the heap.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">fts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                                                                <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="k">Limit</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">48</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">83</span><span class="p">.</span><span class="mi">25</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">width</span><span class="o">=</span><span class="mi">1523</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">242</span><span class="p">.</span><span class="mi">974</span><span class="p">..</span><span class="mi">248</span><span class="p">.</span><span class="mi">366</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">809</span> <span class="k">read</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">temp</span> <span class="k">read</span><span class="o">=</span><span class="mi">187</span> <span class="n">written</span><span class="o">=</span><span class="mi">552</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="k">Index</span> <span class="n">Scan</span> <span class="k">using</span> <span class="n">pgmail_idx</span> <span class="k">on</span> <span class="n">pgmail</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">48</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">193885</span><span class="p">.</span><span class="mi">14</span> <span class="k">rows</span><span class="o">=</span><span class="mi">54984</span> <span class="n">width</span><span class="o">=</span><span class="mi">1523</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">242</span><span class="p">.</span><span class="mi">972</span><span class="p">..</span><span class="mi">248</span><span class="p">.</span><span class="mi">358</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)</span>
</span><span class='line'><span class="s1">         Order By: (fts &amp;lt;=&amp;gt; ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">809</span> <span class="k">read</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">temp</span> <span class="k">read</span><span class="o">=</span><span class="mi">187</span> <span class="n">written</span><span class="o">=</span><span class="mi">552</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">14</span><span class="p">.</span><span class="mi">709</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">312</span><span class="p">.</span><span class="mi">794</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">8</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>However, the problem persists if you need to get the total count of matching
rows.  Then PostgreSQL executor still have to fetch all the matching rows from
the heap in order to check their visibility.  So, if you need to get a total
number of matching rows for pagination, then it might be still very slow.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                                              <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">————————————————————————————————————————————–</span>
</span><span class='line'> <span class="k">Aggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">118931</span><span class="p">.</span><span class="mi">46</span><span class="p">..</span><span class="mi">118931</span><span class="p">.</span><span class="mi">47</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">36263</span><span class="p">.</span><span class="mi">708</span><span class="p">..</span><span class="mi">36263</span><span class="p">.</span><span class="mi">709</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">800692</span> <span class="k">read</span><span class="o">=</span><span class="mi">348338</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">530</span><span class="p">.</span><span class="mi">19</span><span class="p">..</span><span class="mi">118799</span><span class="p">.</span><span class="mi">14</span> <span class="k">rows</span><span class="o">=</span><span class="mi">52928</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">74</span><span class="p">.</span><span class="mi">724</span><span class="p">..</span><span class="mi">36195</span><span class="p">.</span><span class="mi">946</span> <span class="k">rows</span><span class="o">=</span><span class="mi">224568</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)</span>
</span><span class='line'><span class="s1">         Rows Removed by Index Recheck: 266782</span>
</span><span class='line'><span class="s1">         Heap Blocks: exact=39841 lossy=79307</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=800692 read=348338</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Index Scan on pgmail_fts_idx  (cost=0.00..516.96 rows=52928 width=0) (actual time=67.467..67.467 rows=224568 loops=1)</span>
</span><span class='line'><span class="s1">               Index Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">41</span> <span class="k">read</span><span class="o">=</span><span class="mi">102</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">210</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">36263</span><span class="p">.</span><span class="mi">790</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">12</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For sure, there are some modern UI’s techniques, which doesn’t require to
show full number of results to user (continuous scrolling, for instance).
Alternatively, one can use a planner estimation instead of true number of
matching rows.  But nevertheless, slow counting of total results number was
still a problem for many of RUM users.</p>

<p>Situation was improved after index-only count was <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=7c70996e">committed</a>.
Naturally, PostgreSQL maintains visibility map for heap pages.  When
visibility bit is set for particular heap page, then all the tuples on that page
are visible; so, visibility check can be skipped.  Using visibility map, index-
only scan node is working.  But, if index-only scan can skip fetching heap, then
why can’t count do the same?  Now it can!</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                                              <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">————————————————————————————————————————————–</span>
</span><span class='line'> <span class="k">Aggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">121794</span><span class="p">.</span><span class="mi">28</span><span class="p">..</span><span class="mi">121794</span><span class="p">.</span><span class="mi">29</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">132</span><span class="p">.</span><span class="mi">336</span><span class="p">..</span><span class="mi">132</span><span class="p">.</span><span class="mi">336</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">404</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">558</span><span class="p">.</span><span class="mi">13</span><span class="p">..</span><span class="mi">121656</span><span class="p">.</span><span class="mi">82</span> <span class="k">rows</span><span class="o">=</span><span class="mi">54984</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">83</span><span class="p">.</span><span class="mi">676</span><span class="p">..</span><span class="mi">116</span><span class="p">.</span><span class="mi">889</span> <span class="k">rows</span><span class="o">=</span><span class="mi">224568</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)</span>
</span><span class='line'><span class="s1">         Heap Blocks: exact=119148</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=404</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Index Scan on pgmail_idx  (cost=0.00..544.38 rows=54984 width=0) (actual time=61.459..61.459 rows=224568 loops=1)</span>
</span><span class='line'><span class="s1">               Index Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">398</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">183</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">133</span><span class="p">.</span><span class="mi">885</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">11</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Therefore, when you run non-selective fulltext query in PostgreSQL 11 with
RUM, then neither TOP-N query neither COUNT(*) query fetches the whole set of
matching rows from the heap.  That’s cool, and I would say that fulltext search
is made almost right in this case.  It’s “almost”, because it would be nice
to get both TOP-N and COUNT(*) in one SQL query and single index scan.  And that
is a room for improvement in future versions.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Index | Alexander Korotkov's blog]]></title>
  <link href="https://akorotkov.github.io/blog/categories/index/atom.xml" rel="self"/>
  <link href="https://akorotkov.github.io/"/>
  <updated>2021-05-17T23:39:55+03:00</updated>
  <id>https://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Full Text Search Done (Almost) Right in PostgreSQL 11]]></title>
    <link href="https://akorotkov.github.io/blog/2018/02/17/fulltext-search-made-almost-right/"/>
    <updated>2018-02-17T18:20:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2018/02/17/fulltext-search-made-almost-right</id>
    <content type="html"><![CDATA[<p>Long story short, using PostgreSQL 11 with <a href="https://github.com/postgrespro/rum">RUM index</a>
you can do both TOP-N query and COUNT(*) for non-selective FTS queries without
fetching all the results from heap (that means much faster).  Are you bored yet?
If not, please read the detailed description below.</p>

<p>At November 1st 2017, Tome Lane committed a <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=7c70996e">patch</a>
enabling bitmap scans to behave like index-only scan when possible.
In particular, since PostgreSQL 11 COUNT(*) queries can be evaluated using
bitmap scans without accessing heap when corresponding bit in visibility map
is set.  This patch was written by Alexander Kuzmenkov and reviewed by
Alexey Chernyshov (sboth are my Postgres Pro colleagues), and it was heavily
revised by Tom Lane.</p>

<!--more-->

<p>This commit might seem to be just one of planner and executor optimizations,
nice but doesn’t deserve much attention.  However, under detailed consideration
this patch appears to be significant improvement on the way of making full text
search in PostgreSQL to be done the right way.</p>

<p>I’ve started working on FTS improvements in 2012.  That time I realized that GIN
index is good for selective FTS queries, when number of matching results is low.
See the example below: GIN did great work for us by returning just few dozens of
matching rows very fast.  The rest operations including relevance calculation
and sorting are also fast, because they are performed over very small row set.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">exclusion</span> <span class="k">constraint</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">exclusion</span> <span class="k">constraint</span><span class="err">’</span><span class="p">))</span> <span class="k">DESC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                                                               <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">—————————————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="k">Limit</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">28</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">320</span><span class="p">.</span><span class="mi">142</span><span class="p">..</span><span class="mi">320</span><span class="p">.</span><span class="mi">149</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">7138</span> <span class="k">read</span><span class="o">=</span><span class="mi">7794</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Sort</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">320</span><span class="p">.</span><span class="mi">141</span><span class="p">..</span><span class="mi">320</span><span class="p">.</span><span class="mi">147</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Sort</span> <span class="k">Key</span><span class="p">:</span> <span class="p">(</span><span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="err">‘</span><span class="s1">&#39;’exclus’’ &amp;amp; ‘‘constraint’’’::tsquery)) DESC</span>
</span><span class='line'><span class="s1">         Sort Method: top-N heapsort  Memory: 38kB</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=7138 read=7794</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Heap Scan on pgmail  (cost=44.20..143.72 rows=25 width=784) (actual time=5.232..315.302 rows=3357 loops=1)</span>
</span><span class='line'><span class="s1">               Recheck Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">exclus</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="k">constraint</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">2903</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">7138</span> <span class="k">read</span><span class="o">=</span><span class="mi">7794</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail_fts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">44</span><span class="p">.</span><span class="mi">19</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">3</span><span class="p">.</span><span class="mi">689</span><span class="p">..</span><span class="mi">3</span><span class="p">.</span><span class="mi">689</span> <span class="k">rows</span><span class="o">=</span><span class="mi">3357</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘&#39;’</span><span class="n">exclus</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="k">constraint</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">11</span> <span class="k">read</span><span class="o">=</span><span class="mi">23</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">176</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">320</span><span class="p">.</span><span class="mi">213</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">15</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>But situation is different if FTS query is not selective and number of matching
rows is high.  Then we have fetch all those rows from heap, calculate relevance
for each of them and sort them.  And despite we only need TOP-10 rows, this
query takes a lot of time.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">))</span> <span class="k">DESC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                                                                 <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————————————–</span>
</span><span class='line'> <span class="k">Limit</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">28</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">18110</span><span class="p">.</span><span class="mi">231</span><span class="p">..</span><span class="mi">18110</span><span class="p">.</span><span class="mi">236</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">1358323</span> <span class="k">read</span><span class="o">=</span><span class="mi">399077</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Sort</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">144</span><span class="p">.</span><span class="mi">26</span><span class="p">..</span><span class="mi">144</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">784</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">18110</span><span class="p">.</span><span class="mi">229</span><span class="p">..</span><span class="mi">18110</span><span class="p">.</span><span class="mi">231</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Sort</span> <span class="k">Key</span><span class="p">:</span> <span class="p">(</span><span class="n">ts_rank_cd</span><span class="p">(</span><span class="n">fts</span><span class="p">,</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)) DESC</span>
</span><span class='line'><span class="s1">         Sort Method: top-N heapsort  Memory: 44kB</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=1358323 read=399077</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Heap Scan on pgmail  (cost=44.20..143.72 rows=25 width=784) (actual time=70.267..17895.628 rows=224568 loops=1)</span>
</span><span class='line'><span class="s1">               Recheck Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="k">Rows</span> <span class="n">Removed</span> <span class="k">by</span> <span class="k">Index</span> <span class="k">Recheck</span><span class="p">:</span> <span class="mi">266782</span>
</span><span class='line'>               <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">39841</span> <span class="n">lossy</span><span class="o">=</span><span class="mi">79307</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">1358323</span> <span class="k">read</span><span class="o">=</span><span class="mi">399077</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail_fts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">44</span><span class="p">.</span><span class="mi">19</span> <span class="k">rows</span><span class="o">=</span><span class="mi">25</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">63</span><span class="p">.</span><span class="mi">914</span><span class="p">..</span><span class="mi">63</span><span class="p">.</span><span class="mi">914</span> <span class="k">rows</span><span class="o">=</span><span class="mi">224568</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘&#39;’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>                     <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">41</span> <span class="k">read</span><span class="o">=</span><span class="mi">102</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">131</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">18110</span><span class="p">.</span><span class="mi">376</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">16</span> <span class="k">rows</span><span class="p">)(</span><span class="mi">15</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>How can we improve this situation?  If we would get results from index
pre-ordered by relevance, then we would be able to evaluate TOP-N query
without fetching the whole set of matching rows from heap.  Unfortunately,
that appears to be impossible for GIN index which stores only facts of occurence
of specifix terms in document.  But if we have additional infromation
about terms positions in the index, then it might work.  That information
would be enough to calculate relevance only basing on index information.</p>

<p><img class="no-border center 2x" src="/images/gin2rum.png" width="614" height="134"></p>

<p>Thus, I’ve proposed <a href="https://www.postgresql.org/message-id/CAPpHfdtSt47PpRQBK6OawHePLJk8PF-wNhswaUpre7_%2Bcc_kmA%40mail.gmail.com">proposed</a>
a set of patches to GIN index.  Some improvements were committed including
<a href="http://www.sai.msu.su/~megera/postgres/talks/329_PGCon2014-GIN.pdf">index compression and index search optimization</a>.  However, additional information storage for GIN
index wasn’t committed, because it alters GIN index structure too much.</p>

<p>Fortunately, we have
<a href="blog/2016/04/06/extensible-access-methods/">extensible index access methods</a>
in PostgreSQL 9.6.  And that enables us to implement things, which wasn’t
committed to GIN and more, as a separate index access method
<a href="https://github.com/postgrespro/rum">RUM</a>.  Using RUM, one can execute TOP-N
FTS query much faster without fetching all the matching rows from heap.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">fts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                                                                <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="k">Limit</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">48</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">83</span><span class="p">.</span><span class="mi">25</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">width</span><span class="o">=</span><span class="mi">1523</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">242</span><span class="p">.</span><span class="mi">974</span><span class="p">..</span><span class="mi">248</span><span class="p">.</span><span class="mi">366</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">809</span> <span class="k">read</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">temp</span> <span class="k">read</span><span class="o">=</span><span class="mi">187</span> <span class="n">written</span><span class="o">=</span><span class="mi">552</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="k">Index</span> <span class="n">Scan</span> <span class="k">using</span> <span class="n">pgmail_idx</span> <span class="k">on</span> <span class="n">pgmail</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">48</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">193885</span><span class="p">.</span><span class="mi">14</span> <span class="k">rows</span><span class="o">=</span><span class="mi">54984</span> <span class="n">width</span><span class="o">=</span><span class="mi">1523</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">242</span><span class="p">.</span><span class="mi">972</span><span class="p">..</span><span class="mi">248</span><span class="p">.</span><span class="mi">358</span> <span class="k">rows</span><span class="o">=</span><span class="mi">10</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)</span>
</span><span class='line'><span class="s1">         Order By: (fts &amp;lt;=&amp;gt; ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">809</span> <span class="k">read</span><span class="o">=</span><span class="mi">25</span><span class="p">,</span> <span class="n">temp</span> <span class="k">read</span><span class="o">=</span><span class="mi">187</span> <span class="n">written</span><span class="o">=</span><span class="mi">552</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">14</span><span class="p">.</span><span class="mi">709</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">312</span><span class="p">.</span><span class="mi">794</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">8</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>However, the problem persisted if you need to get total count of matching rows.
Then PostgreSQL executor still have to fetch all the matching rows from the
heap in order to check their visibility.  So, if you need total number of
resulting rows for pagination, then it’s still might be very slow.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                                              <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">————————————————————————————————————————————–</span>
</span><span class='line'> <span class="k">Aggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">118931</span><span class="p">.</span><span class="mi">46</span><span class="p">..</span><span class="mi">118931</span><span class="p">.</span><span class="mi">47</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">36263</span><span class="p">.</span><span class="mi">708</span><span class="p">..</span><span class="mi">36263</span><span class="p">.</span><span class="mi">709</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">800692</span> <span class="k">read</span><span class="o">=</span><span class="mi">348338</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">530</span><span class="p">.</span><span class="mi">19</span><span class="p">..</span><span class="mi">118799</span><span class="p">.</span><span class="mi">14</span> <span class="k">rows</span><span class="o">=</span><span class="mi">52928</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">74</span><span class="p">.</span><span class="mi">724</span><span class="p">..</span><span class="mi">36195</span><span class="p">.</span><span class="mi">946</span> <span class="k">rows</span><span class="o">=</span><span class="mi">224568</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)</span>
</span><span class='line'><span class="s1">         Rows Removed by Index Recheck: 266782</span>
</span><span class='line'><span class="s1">         Heap Blocks: exact=39841 lossy=79307</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=800692 read=348338</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Index Scan on pgmail_fts_idx  (cost=0.00..516.96 rows=52928 width=0) (actual time=67.467..67.467 rows=224568 loops=1)</span>
</span><span class='line'><span class="s1">               Index Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">41</span> <span class="k">read</span><span class="o">=</span><span class="mi">102</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">210</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">36263</span><span class="p">.</span><span class="mi">790</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">12</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>For sure, some modern UIs use techniques like continuous scrolling which doesn’t
require to show full number of results to user.  Also, one can use planner
estimation for number of resulting rows which is typically matching the order
of magnitude to actual number of resulting rows.  But nevertheless, slow counting
of total results number was a problem for many of RUM users.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">EXPLAIN</span> <span class="p">(</span><span class="k">ANALYZE</span><span class="p">,</span> <span class="n">BUFFERS</span><span class="p">)</span>
</span><span class='line'><span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">pgmail</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">fts</span> <span class="o">@@</span> <span class="n">plainto_tsquery</span><span class="p">(</span><span class="err">‘</span><span class="n">english</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">Tom</span> <span class="n">Lane</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                                              <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">————————————————————————————————————————————–</span>
</span><span class='line'> <span class="k">Aggregate</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">121794</span><span class="p">.</span><span class="mi">28</span><span class="p">..</span><span class="mi">121794</span><span class="p">.</span><span class="mi">29</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">132</span><span class="p">.</span><span class="mi">336</span><span class="p">..</span><span class="mi">132</span><span class="p">.</span><span class="mi">336</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">404</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">pgmail</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">558</span><span class="p">.</span><span class="mi">13</span><span class="p">..</span><span class="mi">121656</span><span class="p">.</span><span class="mi">82</span> <span class="k">rows</span><span class="o">=</span><span class="mi">54984</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">83</span><span class="p">.</span><span class="mi">676</span><span class="p">..</span><span class="mi">116</span><span class="p">.</span><span class="mi">889</span> <span class="k">rows</span><span class="o">=</span><span class="mi">224568</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">fts</span> <span class="o">@@</span> <span class="err">‘</span><span class="s1">&#39;’tom’’ &amp;amp; ‘‘lane’’’::tsquery)</span>
</span><span class='line'><span class="s1">         Heap Blocks: exact=119148</span>
</span><span class='line'><span class="s1">         Buffers: shared hit=404</span>
</span><span class='line'><span class="s1">         -&amp;gt;  Bitmap Index Scan on pgmail_idx  (cost=0.00..544.38 rows=54984 width=0) (actual time=61.459..61.459 rows=224568 loops=1)</span>
</span><span class='line'><span class="s1">               Index Cond: (fts @@ ‘&#39;</span><span class="err">’</span><span class="n">tom</span><span class="err">’’</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="err">‘‘</span><span class="n">lane</span><span class="err">’’’</span><span class="p">::</span><span class="n">tsquery</span><span class="p">)</span>
</span><span class='line'>               <span class="n">Buffers</span><span class="p">:</span> <span class="n">shared</span> <span class="n">hit</span><span class="o">=</span><span class="mi">398</span>
</span><span class='line'> <span class="n">Planning</span> <span class="n">time</span><span class="p">:</span> <span class="mi">0</span><span class="p">.</span><span class="mi">183</span> <span class="n">ms</span>
</span><span class='line'> <span class="n">Execution</span> <span class="n">time</span><span class="p">:</span> <span class="mi">133</span><span class="p">.</span><span class="mi">885</span> <span class="n">ms</span>
</span><span class='line'><span class="p">(</span><span class="mi">11</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ALTER INDEX ... SET STATISTICS ...???]]></title>
    <link href="https://akorotkov.github.io/blog/2017/05/31/alter-index-weird/"/>
    <updated>2017-05-31T18:20:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2017/05/31/alter-index-weird</id>
    <content type="html"><![CDATA[<p>It’s not very widely known, but PostgreSQL is gathering statistics for indexed expressions.  See following example.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="k">AS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">random</span><span class="p">()</span> <span class="n">x</span><span class="p">,</span> <span class="n">random</span><span class="p">()</span> <span class="n">y</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000000</span><span class="p">));</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————–</span>
</span><span class='line'> <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">20406</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">333333</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">.</span><span class="mi">671</span><span class="p">..</span><span class="mi">113</span><span class="p">.</span><span class="mi">693</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Filter</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Rows</span> <span class="n">Removed</span> <span class="k">by</span> <span class="n">Filter</span><span class="p">:</span> <span class="mi">999944</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We created table with two columns <code>x</code> and <code>y</code> whose values are independently and uniformly distributed from 0 to 1.  Despite we analyze that table, PostgreSQL optimizer estimates selectivity of <code>x + y &lt; 0.01</code> qual as 1/3.  You can see that this estimation is not even close to reality: we actually selected 56 rows instead of 333333 rows estimated.  This estimation comes from a rough assumption that <code>&lt;</code> operator selects 1/3 of rows unless something more precise is known.  Of course, it could be possible for planner to do something better in this case.  For instance, it could try to calculate histogram for <code>x + y</code> from the separate histograms for <code>x</code> and <code>y</code>.  However, PostgreSQL optimizer doesn’t perform such costly and complex computations for now.</p>

<p>Situation changes once we define an index on <code>x + y</code>.</p>

<!--more-->

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                     <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————————</span>
</span><span class='line'> <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">13</span><span class="p">.</span><span class="mi">39</span><span class="p">..</span><span class="mi">1838</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">641</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">040</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">107</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">56</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">13</span><span class="p">.</span><span class="mi">23</span> <span class="k">rows</span><span class="o">=</span><span class="mi">641</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">028</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">028</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Besides index get used for this query, there is way more accurate estimate for the number of rows selected by <code>x + y &lt; 0.01</code>.  Estimation is improved because PostgreSQL is now gathering separate statistics for <code>x + y</code> expression.  You can check that by querying a system catalog.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_stats</span> <span class="k">WHERE</span> <span class="n">tablename</span> <span class="o">=</span> <span class="err">‘</span><span class="n">test_idx</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span><span class="p">[</span> <span class="n">RECORD</span> <span class="mi">1</span> <span class="p">]</span><span class="err">———</span><span class="o">-+</span><span class="err">——————————————————————————————————————————————–</span>
</span><span class='line'><span class="n">schemaname</span>             <span class="o">|</span> <span class="k">public</span>
</span><span class='line'><span class="n">tablename</span>              <span class="o">|</span> <span class="n">test_idx</span>
</span><span class='line'><span class="n">attname</span>                <span class="o">|</span> <span class="n">expr</span>
</span><span class='line'><span class="n">inherited</span>              <span class="o">|</span> <span class="n">f</span>
</span><span class='line'><span class="n">null_frac</span>              <span class="o">|</span> <span class="mi">0</span>
</span><span class='line'><span class="n">avg_width</span>              <span class="o">|</span> <span class="mi">8</span>
</span><span class='line'><span class="n">n_distinct</span>             <span class="o">|</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">999863</span>
</span><span class='line'><span class="n">most_common_vals</span>       <span class="o">|</span> <span class="err">{</span><span class="mi">0</span><span class="p">.</span><span class="mi">262215601745993</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">319712610449642</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">3959802063182</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">404356196057051</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">40578526025638</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">437070866115391</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">462984828744084</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">4651908758096</span>
</span><span class='line'><span class="n">most_common_freqs</span>      <span class="o">|</span> <span class="err">{</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span>
</span><span class='line'><span class="n">histogram_bounds</span>       <span class="o">|</span> <span class="err">{</span><span class="mi">0</span><span class="p">.</span><span class="mi">00104234321042895</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0141074191778898</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0200657406821847</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0247588600032032</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0284962640143931</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0315022920258343</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0346860070712864</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">03</span>
</span><span class='line'><span class="n">correlation</span>            <span class="o">|</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">00176553</span>
</span><span class='line'><span class="n">most_common_elems</span>      <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="n">most_common_elem_freqs</span> <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="n">elem_count_histogram</span>   <span class="o">|</span> <span class="k">NULL</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So, there are histogram, most common values and etc for <code>x + y</code> expression, and that leads to more accurate selectivity estimation for <code>x + y &lt; 0.01</code>.  However, there is still and 1 order of degree error (641 rows estimated instead of 56).  Could we improve that?  Yes, PostgreSQL have statistics-gathering target parameter which is tunable per column using <a href="https://www.postgresql.org/docs/current/static/sql-altertable.html">ALTER TABLE … SET STATISTICS …</a> command.  Using this command, you may tune size of statistics arrays.</p>

<p>But, uhhhh, in our case we have no column, we have an indexed expression.  That appears to be a problem since there is no documented way to tune statistic target for that…</p>

<p>Nevertheless, it appears to be possible.  There is a gotcha which allows advanced DBAs to do that.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">INDEX</span> <span class="n">test_idx</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="n">expr</span> <span class="k">SET</span> <span class="k">STATISTICS</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                    <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">4</span><span class="p">.</span><span class="mi">96</span><span class="p">..</span><span class="mi">258</span><span class="p">.</span><span class="mi">61</span> <span class="k">rows</span><span class="o">=</span><span class="mi">69</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">022</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">074</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">56</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">4</span><span class="p">.</span><span class="mi">94</span> <span class="k">rows</span><span class="o">=</span><span class="mi">69</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">014</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">014</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That works.  When we collect statistic arrays of 10000 size, estimate becomes 69 rows.  It’s only 23% estimation error which is more than good enough for query planning.</p>

<p>But… What the hell is <code>ALTER INDEX ... SET STATISTICS ...</code>?!  There is nothing like this in PostgreSQL documentation!</p>

<p>Let’s understand this situation step by step.</p>

<ol>
  <li><code>ALTER INDEX</code> and <code>ALTER TABLE</code> share the same bison rule.</li>
  <li>Cases when <code>ALTER INDEX</code> is not applicable are filtered runtime.</li>
  <li><code>ALTER INDEX ... SET STATISTICS ...</code> is not forbidden and works the same way as <code>ALTER TABLE ... SET STATISTICS ...</code> does.</li>
  <li>Indexed expressions are internally named as attributes: <code>expr</code>, <code>expr1</code>, <code>expr2</code> …</li>
</ol>

<p>There was <a href="http://www.postgresql.org/message-id/flat/3677.1437057873%40sss.pgh.pa.us">some short discussion</a> about that in pgsql-hackers mailing lists.  The conclusion was that this should be documented, but it’s not yet done.  I also think that we should invent some better syntax for that instead of usage of internal column names.</p>
]]></content>
  </entry>
  
</feed>

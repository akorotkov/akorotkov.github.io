<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Arm | Alexander Korotkov's blog]]></title>
  <link href="https://akorotkov.github.io/blog/categories/arm/atom.xml" rel="self"/>
  <link href="https://akorotkov.github.io/"/>
  <updated>2021-05-17T23:31:58+03:00</updated>
  <id>https://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dramatical Effect of LSE Instructions for PostgreSQL on Graviton2 Instances]]></title>
    <link href="https://akorotkov.github.io/blog/2021/04/30/arm/"/>
    <updated>2021-04-30T03:10:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2021/04/30/arm</id>
    <content type="html"><![CDATA[<p>The world changes. ARM architecture breaks into new areas of computing. An only
decade ago, only your mobile, router, or another specialized device could be
ARM-based, while your desktop and server were typically x86-based. Nowadays,
your new MacBook is ARM-based, and your EC2 instance could be ARM as well.</p>

<p>In the mid-2020, Amazon made graviton2 instances publically available. The
maximum number of CPU core there is 64. This number is where it becomes
interesting to check PostgreSQL scalability. It’s exciting to check because
ARM implements atomic operations using pair of load/store. So, in a sense,
ARM is just like Power, where
<a href="https://www.postgresql.org/message-id/CAPpHfdsKrh7c7P8-5eG-qW3VQobybbwqH%3DgL5Ck%2BdOES-gBbFg%40mail.gmail.com">I’ve previously seen</a>
a significant effect of platform-specific atomics optimizations.</p>

<p>But on the other hand, ARM 8.1 defines a set of LSE instructions, which,
in particular, provide the way to implement atomic operation in a single
instruction (just like x86). What would be better: special optimization,
which puts custom logic between load and store instructions, or just a simple
loop of LSE CAS instructions? I’ve tried them both.</p>

<p>You can see the results of read-only and read-write pgbench on the graphs
below (details on experiments are <a href="https://www.postgresql.org/message-id/CAPpHfdsGqVd6EJ4mr_RZVE5xSiCNBy4MuSvdTrKmTpM0eyWGpg%40mail.gmail.com">here</a>).
<code>pg14-devel-lwlock-ldrex-strex</code> is the patched PostgreSQL with special
load/store optimization for lwlock, <code>pg14-devel-lse</code> is PostgreSQL compiled
with LSE support enabled.</p>

<p><img class="no-border 2x" src="/images/arm-ro.png" width="720" height="432"></p>

<p><img class="no-border 2x" src="/images/arm-rw.png" width="720" height="432"></p>

<p>You can see that load/store optimization gives substantial positive effect, but
LSE rocks here!</p>

<p>So, if you’re running PostgreSQL on graviton2 instance, make sure you’ve
binaries compiled with LSE support (see <a href="https://github.com/aws/aws-graviton-getting-started/blob/master/c-c++.md">the instruction</a>)
because the effect is dramatic.</p>

<p>BTW, it appears that <a href="https://www.postgresql.org/message-id/1367116.1606802480%40sss.pgh.pa.us">none of these optimizations have a noticeable effect on the performance of Apple M1</a>.
Probably, M1 has a smart enough inner optimizer to recognize these different
implementations to be equivalent.  And it was surprising that LSE usage might
give <a href="https://www.postgresql.org/message-id/CAB10pyYgh%2BKM4rY6XYbj3NNHkUQVV9UNpqaVmb9_fLbsUW%2BVyg%40mail.gmail.com">a small negative effect on Kunpeng 920</a>.
It was discouraging for me to know an ARM processor, where single instruction
operation is slower than multiple instruction equivalent. Hopefully,
processor architects would fix this in new Kunpeng processors.</p>

<p>In general, we see that now different ARM embodiments have different
performance characteristics and different effects of optimizations. Hopefully,
this is a problem of growth, and it will be overcome soon.</p>

<p><strong>Update:</strong> As Krunal Bauskar pointer in the comments, LSE instructions are still
faster than the load/store option on Kunpeng 920. Different timings might cause
the regression. For instance, with LSE instructions, we could just faster reach
the regression caused by another bottleneck.</p>

]]></content>
  </entry>
  
</feed>

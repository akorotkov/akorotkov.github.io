<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Extendability | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/extendability/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2017-05-31T18:49:40+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extensible Access Methods Are Committed to 9.6]]></title>
    <link href="http://akorotkov.github.io/blog/2016/04/06/extensible-access-methods/"/>
    <updated>2016-04-06T15:26:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/04/06/extensible-access-methods</id>
    <content type="html"><![CDATA[<p>PostgreSQL 9.6 receives suitable support of extensible index access methods.
And that’s good news because Postgres was initially designed to support it.</p>

<blockquote>
  <p>“It is imperative that a user be able to construct new access methods to 
provide efficient access to instances of nontraditional base types”</p>

  <p>Michael Stonebraker, Jeff Anton, Michael Hirohama.
Extendability in POSTGRES , IEEE Data Eng. Bull. 10 (2) pp.16-23, 1987</p>
</blockquote>

<p>That was a huge work which consists of multiple steps.</p>

<!--more-->

<ol>
  <li>Rework access method interface so that access method internals are hidden
from SQL level to C level.  Besides help for custom access methods support,
this refactoring is good by itself.<br />
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=65c5fcd3">Committed</a> by Tom Lane.</li>
  <li><code>CREATE ACCESS METHOD</code> command which provides legal way for insertion into
pg_am with support of dependencies and pg_dump/pg_restore.
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=473b9328">Committed</a> by Alvaro Herrera.</li>
  <li>Generic WAL interface which provides custom access methods the way to be
WAL-logged.  Each built-in access method has its own type of WAL records.
But custom access method shouldn’t because it could affect reliability.
Generic WAL records represent difference between pages in general way as
result of per-byte comparison of original and modified images of the page.
For sure, it is not as efficient as own type of WAL records, but there is
no choice under restrictions we have.
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=65578341">Committed</a> by Teodor Sigaev.</li>
  <li>Bloom contrib module which is example of custom index access method which
uses generic WAL interface.  This contrib is essential for testing
infrastructure described above.  Also, this access method could be useful by
itself.
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=9ee014fc">Committed</a> by Teodor Sigaev.</li>
</ol>

<p>I am very thankful for the efforts of committers and reviewers who make it
possible to include these features into PostgreSQL.</p>

<p>However, end users don’t really care about this infrastructure.  They do care
about features we can provide on the base of this infrastructure.  Actually,
we would be able to have index access methods which are:</p>

<ul>
  <li>Too hard to add to PostgreSQL core.  For instance, we presented
<a href="https://wiki.postgresql.org/images/2/25/Full-text_search_in_PostgreSQL_in_milliseconds-extended-version.pdf">fast FTS</a>
in 2012.  We have 2 of 4 GIN features committed to core.  And it seems to be
very long way to have rest of features in core.  But since 9.6 we would
provide it as an extension.</li>
  <li>Not patent free.  There are some interesting data structures which are
covered by patents (Fractal Tree index, for example).  This is why they
couldn’t be added to PostgreSQL core.  Since 9.6, they could be provided
without fork.</li>
</ul>

<p>Also, I consider this work as an approach (together with FDW) to pluggable
storage engines.  I will speak about this during my
<a href="http://www.pgcon.org/2016/schedule/events/920.en.html">talk at PGCon 2016</a>.</p>

]]></content>
  </entry>
  
</feed>

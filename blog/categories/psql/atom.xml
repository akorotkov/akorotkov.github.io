<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Psql | Alexander Korotkov's blog]]></title>
  <link href="https://akorotkov.github.io/blog/categories/psql/atom.xml" rel="self"/>
  <link href="https://akorotkov.github.io/"/>
  <updated>2021-05-06T18:15:32+03:00</updated>
  <id>https://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drawing Graphs Directly in Psql]]></title>
    <link href="https://akorotkov.github.io/blog/2016/06/09/psql-graph/"/>
    <updated>2016-06-09T16:45:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2016/06/09/psql-graph</id>
    <content type="html"><![CDATA[<p>For people who are actively working with psql, it frequently happens that you
want to draw graph for the table you’re currently seeing.  Typically, it means a
cycle of actions including: exporting data, importing it into graph drawing tool
and drawing graph itself.  It appears that this process could be automated:
graph could be drawn by typing a single command directly in psql.  See an
example on the screenshot below.</p>

<p><img class="no-border center" src="/images/screen-psql-iterm-graph.png" width="689" height="958"></p>

<!--more-->

<p>It might seem like a magic, but actually there is absolutely no magic.  iTerm2
supports <a href="https://www.iterm2.com/documentation-images.html">image inlining</a>
since version 3 which is currently beta.  Thus, if we put image surrounded
with corresponding escape sequences it will appear in the terminal.  From psql
side we need to redirect output to the script which would do it.  We can define
a macro for simplifying this like in <a href="/blog/2015/08/26/psql-gdb-attach/">one of my previous posts</a>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="err">\</span><span class="k">set</span> <span class="n">graph</span> <span class="err">‘\</span><span class="k">g</span> <span class="o">|</span><span class="n">pg_graph</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And finally we need a pg_graph script which parses psql output, draws graph and
puts it into stdout.  I <a href="https://gist.github.com/akorotkov/2c7011ac30de27b9c5631f1bf418f0a1">wrote one</a>
using Python and matplotlib.  It recognizes first column as series of X-values
and rest of columns as series of Y-values.  If first column contains only
decimal values it draws a plot chart, otherwise it draws a bar chart.</p>

<p>Thereby, it’s not hard to teach psql to do more things.  Also, we can consider
some improvements to psql including:</p>

<ul>
  <li>Add output format option for <code>\g</code> which would make it easier to parse psql
output from scripts;</li>
  <li>Provide elegant way to pass parameters into psql macro.</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Psql Command to Attach Gdb to Backend]]></title>
    <link href="https://akorotkov.github.io/blog/2015/08/26/psql-gdb-attach/"/>
    <updated>2015-08-26T18:00:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2015/08/26/psql-gdb-attach</id>
    <content type="html"><![CDATA[<p>While hacking PostgreSQL it’s very useful to know pid of the backend you are
working with. You need to know pid of the process to attach debugger, profiler
etc. Luckily, .psqlrc provides us an elegant way to define the shortcuts for
psql. Using config line below one can find out backend pid just by typing <code>:pid</code>.</p>

<p><code>sql .psqlrc
\set pid 'SELECT pg_backend_pid();'
</code></p>

<p><code>sql
=# :pid
 pg_backend_pid
----------------
          99038
(1 row)
</code></p>

<p>In 9.6 it becomes possible to even
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=275f05c9">include backend pid into psql prompt</a>.</p>

<p>However, it’s possible to automate more complex actions in psql. I’ve configured
my psql to run gdb attached to current backend in new tab of iTerm2 just by
typing <code>:gdb</code>.</p>

<p><img class="no-border" src="/images/screen-psql-iterm-gdb.png" width="494" height="411"></p>

<!--more-->

<p>The <code>:gdb</code> command selects pid of current backend and puts it to the input of
pg_debug script.</p>

<p><code>sql .psqlrc
\set gdb 'SELECT pg_backend_pid() \\g |pg_debug'
</code></p>

<p>pg_debug extracts pid from its input and then runs OSA script which runs gdb
in the new tab of iTerm2.</p>

<p>``` bash pg_debug
#!/bin/bash</p>

<p>IFS=’’</p>

<p>while read line
do
	# Extended display off
	if [[ $line =~ ^\ +([0-9]+) ]]; then
		PID=${BASH_REMATCH[1]}
		break
	fi
	# Extended display on
	if [[ $line =~ ^pg_backend_pid.*\ ([0-9]+) ]]; then
		PID=${BASH_REMATCH[1]}
		break
	fi
done</p>

<h1 id="open-gdb-session">Open gdb session</h1>
<p>osascript -e “
tell application "iTerm"
	activate
	tell the current terminal
		set mysession to (the current session)
		launch session "Default Session"
		tell the last session
			write text "gdb –pid=$PID -x &lt;(echo continue)"
		end tell
		select mysession
	end tell
end tell”
```</p>

<p>This script works for Mac OS X and iTerm2, but the same approach should work
for other platforms and terminal emulators.</p>
]]></content>
  </entry>
  
</feed>

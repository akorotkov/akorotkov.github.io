<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pg | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/pg/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2017-05-31T18:32:53+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ALTER INDEX ... SET STATISTICS ...???]]></title>
    <link href="http://akorotkov.github.io/blog/2017/05/31/alter-index-weird/"/>
    <updated>2017-05-31T18:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2017/05/31/alter-index-weird</id>
    <content type="html"><![CDATA[<p>It’s not very widely known, but PostgreSQL is gathering statistics for indexed expressions.  See following example.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="k">AS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">random</span><span class="p">()</span> <span class="n">x</span><span class="p">,</span> <span class="n">random</span><span class="p">()</span> <span class="n">y</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000000</span><span class="p">));</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————–</span>
</span><span class='line'> <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">20406</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">333333</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">.</span><span class="mi">671</span><span class="p">..</span><span class="mi">113</span><span class="p">.</span><span class="mi">693</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Filter</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Rows</span> <span class="n">Removed</span> <span class="k">by</span> <span class="n">Filter</span><span class="p">:</span> <span class="mi">999944</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We created table with two columns <code>x</code> and <code>y</code> which values are independently and uniformly distributed from 0 to 1.  Despite we analyze that table, PostgreSQL optimizer estimates selectivity of <code>x + y &lt; 0.01</code> qual as 1/3.  You can see that this estimation is not even close to reality: we actually selected 56 rows instead of 333333 rows estimated.  This estimation comes from a rough assumption that <code>&lt;</code> operator selects 1/3 of rows unless something more precise is known.  Of course, it could be possible for planner to do something better in this case.  For instance, it could try to calculate histogram for <code>x + y</code> from the separate histograms for <code>x</code> and <code>y</code>.  However, PostgreSQL optimizer doesn’t perform such costly and complex computations for now.</p>

<p>Situation changes once we define an index on <code>x + y</code>.</p>

<!--more-->

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                     <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————————</span>
</span><span class='line'> <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">13</span><span class="p">.</span><span class="mi">39</span><span class="p">..</span><span class="mi">1838</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">641</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">040</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">107</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">56</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">13</span><span class="p">.</span><span class="mi">23</span> <span class="k">rows</span><span class="o">=</span><span class="mi">641</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">028</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">028</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Besides index get used for this query, there is way more accurate estimate for the number of rows selected by qual <code>x + y</code>.  Estimation is improved because PostgreSQL is now gathering separate statistics for <code>x + y</code> expression.  You can check that by querying a system catalog.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_stats</span> <span class="k">WHERE</span> <span class="n">tablename</span> <span class="o">=</span> <span class="err">‘</span><span class="n">test_idx</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span><span class="p">[</span> <span class="n">RECORD</span> <span class="mi">1</span> <span class="p">]</span><span class="err">———</span><span class="o">-+</span><span class="err">——————————————————————————————————————————————–</span>
</span><span class='line'><span class="n">schemaname</span>             <span class="o">|</span> <span class="k">public</span>
</span><span class='line'><span class="n">tablename</span>              <span class="o">|</span> <span class="n">test_idx</span>
</span><span class='line'><span class="n">attname</span>                <span class="o">|</span> <span class="n">expr</span>
</span><span class='line'><span class="n">inherited</span>              <span class="o">|</span> <span class="n">f</span>
</span><span class='line'><span class="n">null_frac</span>              <span class="o">|</span> <span class="mi">0</span>
</span><span class='line'><span class="n">avg_width</span>              <span class="o">|</span> <span class="mi">8</span>
</span><span class='line'><span class="n">n_distinct</span>             <span class="o">|</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">999863</span>
</span><span class='line'><span class="n">most_common_vals</span>       <span class="o">|</span> <span class="err">{</span><span class="mi">0</span><span class="p">.</span><span class="mi">262215601745993</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">319712610449642</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">3959802063182</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">404356196057051</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">40578526025638</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">437070866115391</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">462984828744084</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">4651908758096</span>
</span><span class='line'><span class="n">most_common_freqs</span>      <span class="o">|</span> <span class="err">{</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span>
</span><span class='line'><span class="n">histogram_bounds</span>       <span class="o">|</span> <span class="err">{</span><span class="mi">0</span><span class="p">.</span><span class="mi">00104234321042895</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0141074191778898</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0200657406821847</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0247588600032032</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0284962640143931</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0315022920258343</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0346860070712864</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">03</span>
</span><span class='line'><span class="n">correlation</span>            <span class="o">|</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">00176553</span>
</span><span class='line'><span class="n">most_common_elems</span>      <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="n">most_common_elem_freqs</span> <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="n">elem_count_histogram</span>   <span class="o">|</span> <span class="k">NULL</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So, there are histogram, most common values and etc for <code>x + y</code> expression, and that leads to more accurate selectivity estimation for <code>x + y &lt; 0.01</code>.  However, there is still and 1 order of degree error (641 rows estimated instead of 56).  Could we improve that?  Yes, PostgreSQL have statistics-gathering target parameter which is tunable per column using <a href="https://www.postgresql.org/docs/current/static/sql-altertable.html">ALTER TABLE … SET STATISTICS …</a> command.  Using this command, you may tune size of statistics arrays.</p>

<p>But, uhhhh, in our case we have no column, we have an indexed expression.  That appears to be a problem since there is no documented way to tune statistic target for that…</p>

<p>Nevertheless, it appears to be possible.  There is a gotcha which allows advanced DBAs to do that.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">INDEX</span> <span class="n">test_idx</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="n">expr</span> <span class="k">SET</span> <span class="k">STATISTICS</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                    <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">4</span><span class="p">.</span><span class="mi">96</span><span class="p">..</span><span class="mi">258</span><span class="p">.</span><span class="mi">61</span> <span class="k">rows</span><span class="o">=</span><span class="mi">69</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">022</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">074</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">56</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">4</span><span class="p">.</span><span class="mi">94</span> <span class="k">rows</span><span class="o">=</span><span class="mi">69</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">014</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">014</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That works.  When we collect statistic arrays of 10000 size, estimate becomes 69 rows.  It’s only 23% estimation error which is more than good enough for query planning.</p>

<p>But… What the hell is <code>ALTER INDEX ... SET STATISTICS ...</code>?!  There is nothing like this in PostgreSQL documentation!</p>

<p>Let’s understand this situation step by step.</p>

<ol>
  <li><code>ALTER INDEX</code> and <code>ALTER TABLE</code> share the same bison rule.</li>
  <li>Cases when <code>ALTER INDEX</code> is not applicable are filtered runtime.</li>
  <li><code>ALTER INDEX ... SET STATISTICS ...</code> is not forbidden and works the same way as <code>ALTER TABLE ... SET STATISTICS ...</code> does.</li>
  <li>Indexed expressions are internally named as attributes: <code>expr</code>, <code>expr1</code>, <code>expr2</code> …</li>
</ol>

<p>There was <a href="http://www.postgresql.org/message-id/flat/3677.1437057873%40sss.pgh.pa.us">some short discussion</a> about that in pgsql-hackers mailing lists.  The conclusion was that this should be documented, but it’s not yet done.  I also think that we should invent some better syntax for that instead of usage of internal column names.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Our Answer to Uber" Talk at United Dev Conf, Minsk]]></title>
    <link href="http://akorotkov.github.io/blog/2017/04/08/uber-answer/"/>
    <updated>2017-04-08T00:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2017/04/08/uber-answer</id>
    <content type="html"><![CDATA[<p>Today I gave a talk “Our answer to Uber” at United Dev Conf, Minsk.  Slides could be found at <a href="https://www.slideshare.net/AlexanderKorotkov/our-answer-to-uber/">slideshare</a>.  In my talk I attempted to make a review of <a href="https://eng.uber.com/mysql-migration/">Uber’s notes</a> and summarize community efforts to overcome highlighted shortcomings.</p>

<p>United Dev Conf is quite big IT conference with more than 700 attendees.  I’d like to notice that interest in PostgreSQL is quire high.  The room was almost full during my talk.  Also, after the talk I was continuously giving answers to surroundings in about 1 hour.</p>

<p>I think that Minsk is very attractive place for IT events.  There are everything required for it: lovely places for events, good and not expensive hotels, developed infrastructure.  Additionally Belarus introduces 5 days visa-free travel for <a href="http://www.belarus.by/en/press-center/news/belarus-introduces-visa-free-travel-for-80-countries_i_0000052902.html">80 countries</a>, and that made conference attendance much easier for many people.  It would be nice to have PGDay.Minsk one day.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PostgreSQL 9.6 Release Is Approaching. Postgres Pro Has Contributed to It.]]></title>
    <link href="http://akorotkov.github.io/blog/2016/09/29/release-9-6/"/>
    <updated>2016-09-29T16:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/09/29/release-9-6</id>
    <content type="html"><![CDATA[<p><img class="no-border center 2x" src="/images/ppg-9.6.png" width="365" height="95"></p>

<p>New major release of PostgreSQL is approaching.  PostgreSQL 9.6 is expected to
be released later today.  This is a great release which provides to users
<a href="https://www.postgresql.org/docs/9.6/static/release-9-6.html">set of outstanding new features</a>.
I’m especially happy that Postgres Professional did substantial contribution
to this release.  In particular, full-text search for phrases and scalability
improvements are listed as major enhancements of this new PostgreSQL release.</p>

<p>The full list of Postgres Professional constributions including:</p>

<!--more-->

<ul>
  <li>
    <p>Improve the pg_stat_activity view’s information about what a process is waiting for (Amit Kapila, Ildus Kurbangaliev)</p>

    <p>Historically a process has only been shown as waiting if it was waiting for a heavyweight lock. Now waits for lightweight locks and buffer pins are also shown in pg_stat_activity. Also, the type of lock being waited for is now visible. These changes replace the waiting column with wait_event_type and wait_event.</p>

    <p>See <a href="/blog/2016/03/25/wait_monitoring_9_6/">blog post</a> for details.</p>
  </li>
  <li>
    <p>Fix the default text search parser to allow leading digits in email and host tokens (Artur Zakirov)</p>

    <p>In most cases this will result in few changes in the parsing of text. But if you have data where such addresses occur frequently, it may be worth rebuilding dependent tsvector columns and indexes so that addresses of this form will be found properly by text searches.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/56CC9C9D.1050603%40postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Allow GIN index builds to make effective use of maintenance_work_mem settings larger than 1 GB (Robert Abraham, Teodor Sigaev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/CABQqHAWYXW%2BNzAYw4uG_FnbjrdEFyRaigLRkQ7AzAtS6AbHnfA%40mail.gmail.com">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Add pages deleted from a GIN index’s pending list to the free space map immediately (Jeff Janes, Teodor Sigaev)</p>

    <p>This reduces bloat if the table is not vacuumed often.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/CAMkU%3D1xfE1MnGMkv655hB8jCs3PBTb4S5H%2BFnQv8kcmYzyeBDQ%40mail.gmail.com">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Improve handling of dead index tuples in GiST indexes (Anastasia Lubennikova)</p>

    <p>Dead index tuples are now marked as such when an index scan notices that the corresponding heap tuple is dead. When inserting tuples, marked-dead tuples will be removed if needed to make space on the page.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/CAP4vRV6FcKVOpPxs_9L327FpTWz75Ly%3DJRUeY-W89amS19BzwQ%40mail.gmail.com">mailing list discussion</a>  for details.</p>
  </li>
  <li>
    <p>Add an SP-GiST operator class for type box (Alexander Lebedev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/56352972.9020608%40postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Replace shared-buffer header spinlocks with atomic operations to improve scalability (Alexander Korotkov, Andres Freund)</p>

    <p>See <a href="/blog/2016/05/09/scalability-towards-millions-tps/">blog post</a> for details.</p>
  </li>
  <li>
    <p>Partition the shared hash table freelist to reduce contention on multi-CPU-socket servers (Aleksander Alekseev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/20151211170001.78ded9d7@fujitsu">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Improve performance of resource owners with many tracked objects (Aleksander Alekseev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/20151204151504.5c7e4278@fujitsu">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>When appropriate, postpone evaluation of SELECT output expressions until after an ORDER BY sort (Konstantin Knizhnik)</p>

    <p>This change ensures that volatile or expensive functions in the output list are executed in the order suggested by ORDER BY, and that they are not evaluated more times than required when there is a LIMIT clause. Previously, these properties held if the ordering was performed by an index scan or pre-merge-join sort, but not if it was performed by a top-level sort.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/9879B786-E011-44A1-91B8-54649B84106D%40postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Add options to ALTER OPERATOR to allow changing the selectivity functions associated with an existing operator (Yury Zhuravlev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/3348985.V7xMLFDaJO%40dinodell">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Introduce CREATE ACCESS METHOD to allow extensions to create index access methods (Alexander Korotkov, Petr Jelínek)</p>

    <p>See <a href="http://www.pgcon.org/2016/schedule/attachments/421_engines.pdf">slides</a> for details.</p>
  </li>
  <li>
    <p>Improve full-text search to support searching for phrases, that is, lexemes appearing adjacent to each other in a specific order, or with a specified distance between them (Teodor Sigaev, Oleg Bartunov, Dmitry Ivanov)</p>

    <p>See <a href="http://www.pgcon.org/2016/schedule/attachments/436_pgcon-2016-fts.pdf">slides</a> for details.</p>
  </li>
  <li>
    <p>Allow omitting one or both boundaries in an array slice specifier, e.g. array_col[3:] (Yury Zhuravlev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/2987745.PueTkqGxbO@dinodell">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Upgrade the ispell dictionary type to handle modern Hunspell files and support more languages (Artur Zakirov)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/56264908.2020203@postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Add new functions for tsvector data (Stas Kelvich)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/DBD45805-968D-48B1-992A-79F8AC7D3140@postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Allow ts_stat() and tsvector_update_trigger() to operate on values that are of types binary-compatible with the expected argument type, not only that argument type; for example allow citext where text is expected (Teodor Sigaev)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/EA8346F9-8F64-4837-ABE1-B383AF36E0DC@kineticode.com">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Improve pg_rewind so that it can work when the target timeline changes (Alexander Korotkov)</p>

    <p>This allows, for example, rewinding a promoted standby back to some state of the old master’s timeline.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/CAPpHfdtaqYGz6JKvx4AdySA_ceqPH7Lki=F1HxUeNNaBRC7Mtw@mail.gmail.com">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Restructure index access method API to hide most of it at the C level (Alexander Korotkov, Andrew Gierth)</p>

    <p>This change modernizes the index AM API to look more like the designs we have adopted for foreign data wrappers and tablesample handlers. This simplifies the C code and makes it much more practical to define index access methods in installable extensions. A consequence is that most of the columns of the pg_am system catalog have disappeared. New inspection functions have been added to allow SQL queries to determine index AM properties that used to be discoverable from pg_am.</p>

    <p>See <a href="http://www.pgcon.org/2016/schedule/attachments/421_engines.pdf">slides</a> for details.</p>
  </li>
  <li>
    <p>Add a generic interface for writing WAL records (Alexander Korotkov, Petr Jelínek, Markus Nullmeier)</p>

    <p>This change allows extensions to write WAL records for changes to pages using a standard layout. The problem of needing to replay WAL without access to the extension is solved by having generic replay code. This allows extensions to implement, for example, index access methods and have WAL support for them.</p>

    <p>See <a href="http://www.pgcon.org/2016/schedule/attachments/421_engines.pdf">slides</a> for details.</p>
  </li>
  <li>
    <p>Allow SP-GiST operator classes to store an arbitrary “traversal value” while descending the index (Alexander Lebedev, Teodor Sigaev)</p>

    <p>This is somewhat like the “reconstructed value”, but it could be any arbitrary chunk of data, not necessarily of the same data type as the indexed column.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/56352972.9020608%40postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Add contrib/bloom module that implements an index access method based on Bloom filtering (Teodor Sigaev, Alexander Korotkov)</p>

    <p>This is primarily a proof-of-concept for non-core index access methods, but it could be useful in its own right for queries that search many columns.</p>

    <p>See <a href="http://www.pgcon.org/2016/schedule/attachments/421_engines.pdf">slides</a> for details.</p>
  </li>
  <li>
    <p>In contrib/cube, introduce distance operators for cubes, and support kNN-style searches in GiST indexes on cube columns (Stas Kelvich)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/9E07E159-E405-41E2-9889-A04F534FC257@gmail.com">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Add selectivity estimation functions for contrib/intarray operators to improve plans for queries using those operators (Yury Zhuravlev, Alexander Korotkov)</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/1529951.MrgHGDLjOD%40dinodell">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Make contrib/pageinspect’s heap_page_items() function show the raw data in each tuple, and add new functions tuple_data_split() and heap_page_item_attrs() for inspection of individual tuple fields (Nikolay Shaplov)</p>

    <p>See <a href="https://pgconf.ru/media/2016/05/13/tuple-internals.pdf">slides</a> for details.</p>
  </li>
  <li>
    <p>Add support for “word similarity” to contrib/pg_trgm (Alexander Korotkov, Artur Zakirov)</p>

    <p>These functions and operators measure the similarity between one string and the most similar single word of another string.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/567461EC.4030803@postgrespro.ru#567461EC.4030803@postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
  <li>
    <p>Add configuration parameter pg_trgm.similarity_threshold for contrib/pg_trgm’s similarity threshold (Artur Zakirov)</p>

    <p>This threshold has always been configurable, but formerly it was controlled by special-purpose functions set_limit() and show_limit(). Those are now deprecated.</p>

    <p>See <a href="https://www.postgresql.org/message-id/flat/567461EC.4030803@postgrespro.ru#567461EC.4030803@postgrespro.ru">mailing list discussion</a> for details.</p>
  </li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faceted Search in the Single PostgreSQL Query]]></title>
    <link href="http://akorotkov.github.io/blog/2016/06/17/faceted-search/"/>
    <updated>2016-06-17T14:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/06/17/faceted-search</id>
    <content type="html"><![CDATA[<p>Faceted search is very popular buzzword nowadays.  In short, faceted search
specialty is that its results are organized per category.  Popular search
engines are receiving special support of faceted search.</p>

<p>Let’s see what PostgreSQL can do in this field.  At first, let’s formalize our
task.  For each category which have matching documents we want to obtain:</p>

<ul>
  <li>Total number of matching documents;</li>
  <li>TOP N matching documents.</li>
</ul>

<p>For sure, it’s possible to query such data using multiple per category SQL
queries.  But we’ll make it in a single SQL query.  That also would be faster
in majority of cases.  The query below implements faceted search over
PostgreSQL mailing lists archives using window functions and CTE.  Usage
of window function is essential while CTE was used for better query readability.</p>

<!--more-->

<p><code>psql Faceted search SQL query
/*
 * Select all matching messages, calculate rank within list and total count
 * within list using window functions.
 */
WITH msg AS (
    SELECT
        message_id,
        subject,
        list,
        RANK() OVER (
            PARTITION BY list
            ORDER BY ts_rank_cd(body_tsvector,  plainto_tsquery('index bloat')), id
        ) rank,
        COUNT(*) OVER (PARTITION BY list) cnt
    FROM messages
    WHERE body_tsvector @@ plainto_tsquery('index bloat')
),
/* Aggregate messages and count per list into json. */
lst AS (
    SELECT
        list,
        jsonb_build_object(
            'count', cnt,
            'results', jsonb_agg(
                jsonb_build_object(
                    'message_id', message_id,
                    'subject', subject
        ))) AS data
    FROM msg
    WHERE rank &lt;= 5
    GROUP by list, cnt
)
/* Aggregate per list data into single json */
SELECT  jsonb_object_agg(list, data)
FROM    lst;
</code></p>

<p>The resulting JSON document contains total count of matching mailing list
messages and TOP 5 relevant messages for each list.</p>

<p><code>js Faceted search JSON result
{
  "pgsql-admin": {
    "count": 263,
    "results": [
      {"message_id": "CACjxUsMUWkY1Z2K2A6yVdF88GT3xcFw5ofWTR6r1zqLUYu0WzA@mail.gmail.com", "subject": "Re: Slow planning time"},
      {"message_id": "dcc563d11001041749w561874f7y6574fb42ab49f850@mail.gmail.com", "subject": "Re: Finetuning Autovacuum"},
      {"message_id": "AANLkTikWabMzCRCSWuNLuPizSSQX3YILgJrNZuzgp3yM@mail.gmail.com", "subject": "Re: blocking automatic vacuum"},
      {"message_id": "dcc563d10904011631l4058aabew12f3fe4895a072f3@mail.gmail.com", "subject": "Re: Vacuum Full"},
      {"message_id": "FE44E0D7EAD2ED4BB2165071DB8E328C03062D9D@egcrc-ex01.egcrc.org", "subject": "Re: postgres bogged down beyond tolerance"
      }
    ]
  },
/*................................................................................*/
  "pgsql-advocacy": {
    "count": 8,
    "results": [
      {"message_id": "Pine.LNX.4.33.0310291602220.22178-100000@css120.ihs.com", "subject": "Re: Press Release"},
      {"message_id": "20050502203626.GA29791@dcc.uchile.cl", "subject": "Re: [HACKERS] Increased company involvement"},
      {"message_id": "5d94f7afb26f56652e06ba0657573ef2@biglumber.com", "subject": "Search and archives still out of sync"},
      {"message_id": "Pine.GSO.4.64.0708010705100.13114@westnet.com", "subject": "Re: postgresql publication"},
      {"message_id": "20070801151739.GF6165@alvh.no-ip.org", "subject": "Re: postgresql publication"
      }
    ]
  }
}
</code></p>

<p>In the plan of this query we can see that <code>message_body_idx</code> GIN index is
scanned only once, and this is great.</p>

<p><code>psql Plan of faceted search SQL query
                                                                       QUERY PLAN
---------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=2369.50..2369.51 rows=1 width=114) (actual time=34.232..34.232 rows=1 loops=1)
   CTE msg
     -&gt;  WindowAgg  (cost=2087.93..2354.30 rows=491 width=336) (actual time=30.925..33.087 rows=2486 loops=1)
           -&gt;  WindowAgg  (cost=2087.93..2222.96 rows=491 width=336) (actual time=30.716..32.020 rows=2486 loops=1)
                 -&gt;  Sort  (cost=2087.93..2089.16 rows=491 width=336) (actual time=30.711..30.838 rows=2486 loops=1)
                       Sort Key: messages.list, (ts_rank_cd(messages.body_tsvector, plainto_tsquery('index bloat'::text))), messages.id
                       Sort Method: quicksort  Memory: 582kB
                       -&gt;  Bitmap Heap Scan on messages  (cost=48.05..2065.98 rows=491 width=336) (actual time=3.037..24.345 rows=2486 loops=1)
                             Recheck Cond: (body_tsvector @@ plainto_tsquery('index bloat'::text))
                             Heap Blocks: exact=2044
                             -&gt;  Bitmap Index Scan on message_body_idx  (cost=0.00..47.93 rows=491 width=0) (actual time=2.723..2.723 rows=2486 loo
                                   Index Cond: (body_tsvector @@ plainto_tsquery('index bloat'::text))
   CTE lst
     -&gt;  HashAggregate  (cost=12.69..13.69 rows=67 width=540) (actual time=34.090..34.133 rows=14 loops=1)
           Group Key: msg.list, msg.cnt
           -&gt;  CTE Scan on msg  (cost=0.00..11.05 rows=164 width=540) (actual time=30.928..33.879 rows=68 loops=1)
                 Filter: (rank &lt;= 5)
                 Rows Removed by Filter: 2418
   -&gt;  CTE Scan on lst  (cost=0.00..1.34 rows=67 width=114) (actual time=34.092..34.140 rows=14 loops=1)
 Planning time: 0.380 ms
 Execution time: 34.357 ms
</code></p>

<p>Thus, it appears that nothing prevents you from implementing trendy kinds of
searches using old good SQL and powerful features of PostgreSQL including:
fulltext search, JSON support, window functions etc.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuntimeAppend in Pg_pathman: Achievements and New Challenges]]></title>
    <link href="http://akorotkov.github.io/blog/2016/06/15/pg_pathman-runtime-append/"/>
    <updated>2016-06-15T15:00:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/06/15/pg_pathman-runtime-append</id>
    <content type="html"><![CDATA[<p>Dealing with partitioned tables we can’t always select relevant partitions
during query planning.  Naturally, during query planning you can’t know values
which come from subquery or outer part of nested loop join.  Nevertheless, it
would be ridiculous to scan all the partitions in such cases.</p>

<p>This is why my Postgres Professional colleague Dmitry Ivanov developed a
new custom executor node for pg_pathman: RuntimeAppend.  This node behaves
like regular Append node: it contains set of children Nodes which should be
appended.  However, RuntimeAppend have one distinction: each run it selects
only relevant children to append basing on parameter values.</p>

<!--more-->

<p>Let’s consider example: join of <code>journal</code> table which contains row per each
30 seconds of year partitioned by day, and <code>q</code> table which refers 1000 random
rows of <code>journal</code> table.  Without RuntimeAppend optimizer selects Hash Join
plan.</p>

<p><code>sql Regular Append: Hash Join
# EXPLAIN ANALYZE SELECT * FROM q JOIN journal j ON q.dt = j.dt;
                                                          QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=27.50..25442.51 rows=1000 width=56) (actual time=0.479..252.506 rows=1000 loops=1)
   Hash Cond: (j.dt = q.dt)
   -&gt;  Append  (cost=0.00..21463.01 rows=1051201 width=49) (actual time=0.005..152.258 rows=1051201 loops=1)
         -&gt;  Seq Scan on journal_1 j  (cost=0.00..58.80 rows=2880 width=49) (actual time=0.004..0.247 rows=2880 loops=1)
         -&gt;  Seq Scan on journal_2 j_1  (cost=0.00..58.80 rows=2880 width=49) (actual time=0.001..0.208 rows=2880 loops=1)
         -&gt;  Seq Scan on journal_3 j_2  (cost=0.00..58.80 rows=2880 width=49) (actual time=0.001..0.197 rows=2880 loops=1)
...............................................................................................................................
         -&gt;  Seq Scan on journal_366 j_365  (cost=0.00..1.01 rows=1 width=49) (actual time=0.001..0.001 rows=1 loops=1)
   -&gt;  Hash  (cost=15.00..15.00 rows=1000 width=8) (actual time=0.185..0.185 rows=1000 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 48kB
         -&gt;  Seq Scan on q  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.003..0.074 rows=1000 loops=1)
 Planning time: 29.262 ms
 Execution time: 256.337 ms
(374 rows)
</code></p>

<p>The Hash Join execution takes 256 milliseconds for execution and 29 milliseconds
for planning.  Relatively high planning time is expected because all the
partitions are present in plan.  It’s surprising that optimizer didn’t select
Nested Loop join.  Let’s force it to do so by <code>enable_hashjoin = off</code> and
<code>enable_mergejoin = off</code>.</p>

<p><code>sql Regular Append: Nested Loop
# EXPLAIN ANALYZE SELECT * FROM q JOIN journal j ON q.dt = j.dt;
                                                                      QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.28..170817.00 rows=1000 width=56) (actual time=1.091..452.658 rows=1000 loops=1)
   -&gt;  Seq Scan on q  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.006..0.158 rows=1000 loops=1)
   -&gt;  Append  (cost=0.28..167.14 rows=366 width=49) (actual time=0.218..0.438 rows=1 loops=1000)
         -&gt;  Index Scan using journal_1_dt_idx on journal_1 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_2_dt_idx on journal_2 j_1  (cost=0.28..0.46 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_3_dt_idx on journal_3 j_2  (cost=0.28..0.46 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
......................................................................................................................................................
         -&gt;  Index Scan using journal_366_dt_idx on journal_366 j_365  (cost=0.12..0.15 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
 Planning time: 29.922 ms
 Execution time: 456.140 ms
(737 rows)
</code></p>

<p>The Nested Loop join takes 456 milliseconds to execute.  This is even worse.
But this is understandable because we have to scan each partition of <code>journal</code>
for each row of <code>q</code>.</p>

<p>Finally, let’s enable RuntimeAppend.</p>

<p><code>sql RuntimeAppend
# EXPLAIN ANALYZE SELECT * FROM q JOIN journal j ON q.dt = j.dt;
                                                                   QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.28..481.67 rows=1000 width=56) (actual time=0.041..9.911 rows=1000 loops=1)
   -&gt;  Seq Scan on q  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.005..0.079 rows=1000 loops=1)
   -&gt;  Custom Scan (RuntimeAppend)  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=1000)
         -&gt;  Index Scan using journal_330_dt_idx on journal_330 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=5)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_121_dt_idx on journal_121 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.004..0.004 rows=1 loops=1)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_37_dt_idx on journal_37 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=4)
               Index Cond: (dt = q.dt)
................................................................................................................................................
         -&gt;  Index Scan using journal_355_dt_idx on journal_355 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=1)
               Index Cond: (dt = q.dt)
 Planning time: 30.775 ms
 Execution time: 8.615 ms
(687 rows)
</code></p>

<p>The Nested Loop join with RuntimeAppend takes only about 9 milliseconds
to execute!  Such fast execution is possible thanks to RuntimeAppend scans only
one relevant partition of <code>journal</code> for each row of <code>q</code>.</p>

<p>Nevertheless, all the partitions are present in plan and planning time is still
quite high.  This relatively high planning time could be not so significant
for prepared statements or long OLAP queries.</p>

<p>However, long planning time appears to be not the only problem.  We run a
benchmark when RuntimeAppend node returns just a few rows in prepared statement.
Despite high planning time doesn’t affect prepared statements, TPS was few
time slower than it was without partitioning.  After running perf, we got this
<a href="/images/runtimeappend_flamegraph.svg">flamegraph</a>.  This flamegraph shows that
we spend very significant time for locking and unlocking every partition.
Naturally, locking 365 partitions isn’t using fast-path locking and appears to
be significant overhead.</p>

<p>Thus, we see how huge benefit could runtime partition selection have.  However,
in current design having all the partitions in plan cause high overhead.
Solution could be found in redesigning partition locking.  We are researching
this problem now.  It’s likely this problem can’t be solved in the boundaries
of extension and proper solution requires hacking of PostgreSQL core.</p>

]]></content>
  </entry>
  
</feed>

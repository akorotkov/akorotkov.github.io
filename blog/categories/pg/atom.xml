<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pg | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/pg/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2016-03-04T17:14:32+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pg_pathman Beta Release]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release/"/>
    <updated>2016-03-04T17:10:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release</id>
    <content type="html"><![CDATA[<p><img class="no-border" src="/images/partitiontable.jpg"></p>

<p>Partitioning in PostgreSQL is traditionally implemented using <a href="http://www.postgresql.org/docs/9.5/static/ddl-partitioning.html">table inheritance</a>. Table inheritance allow planner to include into plan only those child tables (partitions) which are compatible with query.  Simultaneously a lot of work on partitions management remains on users: create inherited tables, writing trigger which selects appropriate partition for row inserting etc.  In order to automate this work pg_partman extension was written.  Also, there is upcoming work on <a href="http://www.postgresql.org/message-id/55D3093C.5010800@lab.ntt.co.jp">declarative partitioning</a> by Amit Langote for PostgreSQL core.</p>

<p>In Postgres Professional we notice performance problem of inheritance based partitioning.  The problem is that planner selects children tables compatible with query by linear scan.  Thus, for query which selects just one row from one partition it would be much slower to plan than to execute.  This fact discourage many user and this is why we&rsquo;re working on new PostgreSQL extension: <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> caches partitions meta-information and uses set_rel_pathlist hook in order to replace mechanism of child tables selection by its own mechanism.  Thanks to this binary search algorithm over sorted array is used for range partitioning and hash table lookup for hash partitioning.  Therefore, time spent to partitions selection appears to be negligible in comparison with forming of result plan nodes.  See <a href="http://www.postgrespro.com/blog/pgsql/pg_pathman">postgrespro blog post</a> for performance benchmarks.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> now in beta-release status and we encourage all interested users to try it and give us a feedback.  pg_pathman is compatible with PostgreSQL 9.5 and distributed under PostgreSQL license.  In the future we&rsquo;re planning to enhance functionality of pg_pathman by following features.</p>

<ul>
<li>Execute time selection of partitions using custom nodes (useful for nested loops and prepared statements);</li>
<li>Optimization of ordering output from partitioned tables (useful for merge join and order by);</li>
<li>Optimization of hash join when both tables are partitioned by join key;</li>
<li>LIST-partitioning;</li>
<li>HASH-partitioning by attributes of any hashable type.</li>
</ul>


<p>Despite we have pg_pathman useful here and now, we want this functionality to eventually become part of PostgreSQL core.  This is why we are going to join work on declarative partitioning by Amit Langote which have excellent DDL infrastructure and fulfill it with effective internal algorithms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts About Jsonb Statistics]]></title>
    <link href="http://akorotkov.github.io/blog/2015/09/07/jsonb_statistics/"/>
    <updated>2015-09-07T11:30:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2015/09/07/jsonb_statistics</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>Users of jsonb datatype frequently complaint that it lucks of statistics.
Naturally, today jsonb statistics is just default scalar statistics, which is
suitable for <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>&gt;=</code>, <code>&gt;</code> operators selectivity estimation. But
people search jsonb documents using <code>@&gt;</code> operator, expressions with <code>-&gt;</code>
operator, jsquery etc. This is why selectivity estimation, which people
typically get in their queries, is just a stub. This could lead wrong query plans
and bad performance. And it made us introduce hints in jsquery extension.</p>

<p>Thus, problem is clear. But the right solution is still unclear, at least for
me. Let me discuss evident approaches to jsonb statistics and their limitations.</p>

<!--more-->


<h2>Collect just frequent paths</h2>

<p>First candidate for good selectivity estimation is <code>@&gt;</code> operator. Really,
<code>@&gt;</code> is builtin operator with GIN index support. First idea that comes into
mind is to collect most frequent paths and their frequencies as jsonb
statistics. In order to understand idea of paths better let&rsquo;s consider how GIN
jsonb_path_ops works. jsonb_path_ops is builtin GIN operator class, which is
most suitable for jsonb <code>@&gt;</code> operator.</p>

<p>Path is a sequence of key names, array indexes and referenced value.
For instance, the document
<code>{"a": [{"b": "xyz", "c": true}, 10], "d": {"e": [7, false]}}</code>
would be decomposed into following set of paths.</p>

<pre><code>"a".#."b"."xyz"
"a".#."c".true
"a".#.10
"d"."e".#.7
"d"."e".#.false
</code></pre>

<p>In this representation of paths array indexes are replaced with <code>#</code>. That
allows our search to be agnostic to them like <code>@&gt;</code> operator does. Thus, when we
have such decomposition we can say that if <code>a @&gt; b</code> then <code>a</code> paths are superset
of <code>b</code> paths. If we intersect posting list of search argument paths then we can
get list of candidates for search result. This is how jsonb_path_ops works.</p>

<p>The same idea could be applied to jsonb statistics. We could decompose each
jsonb document into set of paths and then collect frequencies of most common
individual paths. Such statistics perfectly fits current PostgreSQL system
catalog and looks very similar to statistics of tsvectors and arrays, which are
decomposed into lexemes and elements correspondingly. Such statistics of most
common paths could look like following table.</p>

<table>
<thead>
<tr>
<th> Path            </th>
<th style="text-align:right;"> Frequency </th>
</tr>
</thead>
<tbody>
<tr>
<td> &ldquo;a&rdquo;.#.&ldquo;b&rdquo;.&ldquo;xyz&rdquo; </td>
<td style="text-align:right;">      0.55 </td>
</tr>
<tr>
<td> &ldquo;d&rdquo;.&ldquo;e&rdquo;.#.77    </td>
<td style="text-align:right;">      0.43 </td>
</tr>
<tr>
<td> &ldquo;a&rdquo;.#.&ldquo;b&rdquo;.&ldquo;def&rdquo; </td>
<td style="text-align:right;">      0.35 </td>
</tr>
<tr>
<td> &ldquo;d&rdquo;.&ldquo;e&rdquo;.#.100   </td>
<td style="text-align:right;">      0.22 </td>
</tr>
<tr>
<td> &ldquo;d&rdquo;.&ldquo;f&rdquo;.true    </td>
<td style="text-align:right;">       0.1 </td>
</tr>
</tbody>
</table>


<p>Having such statistics we can estimate selectivity of <code>@&gt;</code> operator as product
of frequencies of search argument paths. For paths, which are not in most
common list, we can use some default &ldquo;rare frequency&rdquo;. Also, we use quite rough
assumption that paths appearance is independent. Let&rsquo;s be honest: this
assumption is just wrong. However, this is typical assumption we have to use
during query planning. Finally, we don&rsquo;t need absolutely accurate cost. Match of
magnitude order can be considered as a quite good result.</p>

<p>There is also another source or inaccuracy I&rsquo;d like to mention. Let&rsquo;s consider
some example.</p>

<pre><code>a = [{"x": [1]}, {"x": [2]}]
b = [{"x": [1,2]}]
</code></pre>

<p>Both <code>a</code> and <code>b</code> are decomposed into the same set of paths.</p>

<pre><code>#."x".1
#."x".2
</code></pre>

<p>However, neither <code>a @&gt; b</code> neither &lsquo;b @> a&rsquo;. Since we ignored array indexes in
paths we also ignore whether values beholds to same array element or not. This
leads also to false positives in GIN and overestimations by statistics.</p>

<p>This approach is not only limited by <code>@&gt;</code> operator. We can produce estimation
for queries with complex logic. Example in jsquery could be <code>"(abc" = 1 OR
"xyz".# = "hij") AND NOT "def" = false</code>.</p>

<p>However, such statistics hardly can estimate selectivity of <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;=</code>, <code>&gt;</code> operators over jsonb values. For instance, in order to estimate
jsquery <code>"x" &gt; 1</code> we can only count most common paths, which match this
condition. But we&rsquo;re lacking of histograms. It is a serious obstacle in getting
accurate estimates and it lets us search for better solution.</p>

<h2>Collect scalar statistics for each key path</h2>

<p>Another idea of jsonb statistics we can get from assumption that almost every
&ldquo;schemaless&rdquo; dataset can be easily represented in the schema of tables. Assuming
this we would like our selectivity estimates for search in jsonb documents to be
as good as those for search in plain tables.</p>

<p>Let&rsquo;s consider this on the example. The following json document could represent
the information about order in e-commerce.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">1,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;contact&amp;rdquo;:</span> <span class="err">&amp;ldquo;John</span> <span class="err">Smith&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;phone&amp;rdquo;:</span> <span class="err">&amp;ldquo;212</span> <span class="err">555-1234&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;address&amp;rdquo;:</span> <span class="err">&amp;ldquo;10021-3100,</span> <span class="err">21</span> <span class="err">2nd</span> <span class="err">Street,</span> <span class="err">New</span> <span class="err">York&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;products&amp;rdquo;:</span>
</span><span class='line'>  <span class="err">[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;article&amp;rdquo;:</span> <span class="err">&amp;ldquo;XF56120&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;Sunglasses&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;price&amp;rdquo;:</span> <span class="err">500,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;quantity&amp;rdquo;:</span> <span class="err">1</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">&amp;ldquo;article&amp;rdquo;:</span> <span class="err">&amp;ldquo;AT10789&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;T-Shirt&amp;rdquo;,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;price&amp;rdquo;:</span> <span class="err">100,</span>
</span><span class='line'>      <span class="err">&amp;ldquo;quantity&amp;rdquo;:</span> <span class="err">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The same information could be represented in the following couple of tables.</p>

<table>
<thead>
<tr>
<th> id </th>
<th> contact    </th>
<th> phone        </th>
<th> address                             </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1  </td>
<td> John Smith </td>
<td> 212 555-1234 </td>
<td> 10021-3100, 21 2nd Street, New York </td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th> order_id </th>
<th> article </th>
<th> name       </th>
<th style="text-align:right;"> price </th>
<th style="text-align:right;"> quantity </th>
</tr>
</thead>
<tbody>
<tr>
<td>        1 </td>
<td> XF56120 </td>
<td> Sunglasses </td>
<td style="text-align:right;">   500 </td>
<td style="text-align:right;">        1 </td>
</tr>
<tr>
<td>        1 </td>
<td> AT10789 </td>
<td> T-Shirt    </td>
<td style="text-align:right;">   100 </td>
<td style="text-align:right;">        2 </td>
</tr>
</tbody>
</table>


<p>What kind of statictis would be collected by PostgreSQL in the second case? It
would be most common values and histogram for each attribute. Most common values
(MCVs) are values, which occur in the column most frequently. Frequencies of those
values are collected and stored as well. Histogram is described by array of
bounds. Each bound is assumed to contain equal number of column values
excluding MCVs (so called equi-depth histogram).</p>

<p>With some simplification such statistics could be represented in the following
table.</p>

<table>
<thead>
<tr>
<th> Table   </th>
<th> Attribute </th>
<th> Most common values                                </th>
<th> Histogram                                             </th>
</tr>
</thead>
<tbody>
<tr>
<td> order   </td>
<td> contact   </td>
<td> {&ldquo;John Smith&rdquo;: 0.05, &ldquo;James Johnson&rdquo;: 0.01}       </td>
<td> [&ldquo;Anthony Anderson&rdquo;, &ldquo;Lisa Baker&rdquo;, &ldquo;Sandra Phillips&rdquo;] </td>
</tr>
<tr>
<td> product </td>
<td> price     </td>
<td> {&ldquo;100&rdquo;: 0.1, &ldquo;10&rdquo;: 0.08, &ldquo;50&rdquo;: 0.05, &ldquo;150&rdquo;: 0.03} </td>
<td> [0, 12.5, 45.5, 250, 1000]                            </td>
</tr>
<tr>
<td> product </td>
<td> quantity  </td>
<td> {&ldquo;1&rdquo;: 0.5, &ldquo;2&rdquo;: 0.2, &ldquo;3&rdquo;: 0.05, &ldquo;5&rdquo;: 0.01}        </td>
<td> [0, 4, 7, 9, 10]                                      </td>
</tr>
<tr>
<td> &hellip;&hellip;. </td>
<td> &hellip;&hellip;&hellip; </td>
<td> &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;. </td>
<td> &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;.. </td>
</tr>
</tbody>
</table>


<p>What if we replace table and attribute with path of keys where corresponding
value could be found in json document?</p>

<table>
<thead>
<tr>
<th> Key path            </th>
<th> Most common values                                </th>
<th> Histogram                                             </th>
</tr>
</thead>
<tbody>
<tr>
<td> contact             </td>
<td> {&ldquo;John Smith&rdquo;: 0.05, &ldquo;James Johnson&rdquo;: 0.01}       </td>
<td> [&ldquo;Anthony Anderson&rdquo;, &ldquo;Lisa Baker&rdquo;, &ldquo;Sandra Phillips&rdquo;] </td>
</tr>
<tr>
<td> products.#.price    </td>
<td> {&ldquo;100&rdquo;: 0.1, &ldquo;10&rdquo;: 0.08, &ldquo;50&rdquo;: 0.05, &ldquo;150&rdquo;: 0.03} </td>
<td> [0, 12.5, 45.5, 250, 1000]                            </td>
</tr>
<tr>
<td> products.#.quantity </td>
<td> {&ldquo;1&rdquo;: 0.5, &ldquo;2&rdquo;: 0.2, &ldquo;3&rdquo;: 0.05, &ldquo;5&rdquo;: 0.01}        </td>
<td> [0, 4, 7, 9, 10]                                      </td>
</tr>
<tr>
<td> &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;. </td>
<td> &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;. </td>
<td> &hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;&hellip;.. </td>
</tr>
</tbody>
</table>


<p>This kind of statistics seems to be comprehensive enough. It could produce fine
estimations for queries like <code>products.#.price &gt; 100</code>.</p>

<p>However, there are still bunch of open problems here.</p>

<ul>
<li><p>Typical json documents we can meet in applications are really well structured
as an example above. However, there are some cases when they are not. At
first, someone could easily put values into keys. Let me illustrate this on
the following example: <code>products</code> becomes an object where article is used as
a key.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='Json'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="err">&amp;ldquo;id&amp;rdquo;:</span> <span class="err">1,</span>
</span><span class='line'><span class="err">&amp;ldquo;contact&amp;rdquo;:</span> <span class="err">&amp;ldquo;John</span> <span class="err">Smith&amp;rdquo;,</span>
</span><span class='line'><span class="err">&amp;ldquo;phone&amp;rdquo;:</span> <span class="err">&amp;ldquo;212</span> <span class="err">555-1234&amp;rdquo;,</span>
</span><span class='line'><span class="err">&amp;ldquo;address&amp;rdquo;:</span> <span class="err">&amp;ldquo;10021-3100,</span> <span class="err">21</span> <span class="err">2nd</span> <span class="err">Street,</span> <span class="err">New</span> <span class="err">York&amp;rdquo;,</span>
</span><span class='line'><span class="err">&amp;ldquo;products&amp;rdquo;:</span>
</span><span class='line'><span class="err">{</span>
</span><span class='line'><span class="err">&amp;ldquo;XF56120&amp;rdquo;:</span>
</span><span class='line'><span class="err">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;Sunglasses&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;price&amp;rdquo;:</span> <span class="err">500,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;quantity&amp;rdquo;:</span> <span class="err">1</span>
</span><span class='line'><span class="p">}</span><span class="err">,</span>
</span><span class='line'><span class="err">&amp;ldquo;AT</span><span class="mi">10789</span><span class="err">&amp;rdquo;:</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">&amp;ldquo;name&amp;rdquo;:</span> <span class="err">&amp;ldquo;T-Shirt&amp;rdquo;,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;price&amp;rdquo;:</span> <span class="err">100,</span>
</span><span class='line'>  <span class="err">&amp;ldquo;quantity&amp;rdquo;:</span> <span class="err">2</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In this case we can find that cardinality of key paths are very high. Thus,
we would be unable to collect suitable statistics for each key path.
However, we could consider such situation as user mistake. Then we should
advise users to restructure their documents.</p>

<p>There are still kind of documents, which don&rsquo;t fit this model not because of
user mistake but because of their nature. Imagine json formatted query plans
stored in the table. Plans could have unlimited levels of nesting and
correspondingly cardinality of key paths could be very high.</p></li>
<li><p>Some objects stored inside jsonb documents could require special statistics.
For instance, point coordinates could be represented in json as
<code>{"x": 11.3, "y": 27.0}</code>. But statistics we will need in this case is not
separate statistics for <code>x</code> and <code>y</code>. We would need something special for
geometrical objects like 2D-histograms.</p></li>
<li><p>Another problem is fitting this model into PostgreSQL system catalog.
<code>pg_statistic</code> assumes that statistics of attribute is represented by few
arrays. However, in this model we have to store few arrays per each key
path. For sure, we do a trick by storing array of jsonb or something like
this, but that would be a kluge. It would be nice to store each key path in
the separate row of <code>pg_statistic</code>. This would require significant changes
in statistics handling though.</p></li>
</ul>


<h2>Conclusion</h2>

<p>This was just my current thoughts about jsonb statistics. Probably, someone come
with much better ideas. But I&rsquo;m not sure we can find ideal solution, which
would fit everyone needs. We can see that current developments in
multivariate  statistics use pluggable approach: user can turn on specific
method on specific set of column. We could end up with something similar for
jsonb: simple basic statistics + various kinds of pluggable statistics for
specific needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Psql Command to Attach Gdb to Backend]]></title>
    <link href="http://akorotkov.github.io/blog/2015/08/26/psql-gdb-attach/"/>
    <updated>2015-08-26T18:00:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2015/08/26/psql-gdb-attach</id>
    <content type="html"><![CDATA[<p>While hacking PostgreSQL it&rsquo;s very useful to know pid of the backend you are
working with. You need to know pid of the process to attach debugger, profiler
etc. Luckily, .psqlrc provides us an elegant way to define the shortcuts for
psql. Using config line below one can find out backend pid just by typing <code>:pid</code>.</p>

<pre><code class="sql .psqlrc">\set pid 'SELECT pg_backend_pid();'
</code></pre>

<pre><code class="sql">=# :pid
 pg_backend_pid
----------------
          99038
(1 row)
</code></pre>

<p>In 9.6 it becomes possible to even <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=275f05c990c46f8dfe3cb46a3279521bda9e9e27">include backend pid into psql prompt</a>.</p>

<p>However, it&rsquo;s possible to automate more complex actions in psql. I&rsquo;ve configured
my psql to run gdb attached to current backend in new tab of iTerm2 just by
typing <code>:gdb</code>.</p>

<p><img class="no-border" src="/images/screen-psql-iterm-gdb.png"></p>

<!--more-->


<p>The <code>:gdb</code> command selects pid of current backend and puts it to the input of
pg_debug script.</p>

<pre><code class="sql .psqlrc">\set gdb 'SELECT pg_backend_pid() \\g |pg_debug'
</code></pre>

<p>pg_debug extracts pid from its input and then runs OSA script which runs gdb
in the new tab of iTerm2.</p>

<pre><code class="bash pg_debug">#!/bin/bash

IFS=''

while read line
do
    # Extended display off
    if [[ $line =~ ^\ +([0-9]+) ]]; then
        PID=${BASH_REMATCH[1]}
        break
    fi
    # Extended display on
    if [[ $line =~ ^pg_backend_pid.*\ ([0-9]+) ]]; then
        PID=${BASH_REMATCH[1]}
        break
    fi
done

# Open gdb session
osascript -e "
tell application \"iTerm\"
    activate
    tell the current terminal
        set mysession to (the current session)
        launch session \"Default Session\"
        tell the last session
            write text \"gdb --pid=$PID -x &lt;(echo continue)\"
        end tell
        select mysession
    end tell
end tell"
</code></pre>

<p>This script works for Mac OS X and iTerm2, but the same approach should work
for other platforms and terminal emulators.</p>
]]></content>
  </entry>
  
</feed>

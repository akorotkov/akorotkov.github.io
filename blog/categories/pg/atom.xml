<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pg | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/pg/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2016-04-06T15:26:53+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extensible Access Methods Are Committed to 9.6]]></title>
    <link href="http://akorotkov.github.io/blog/2016/04/06/extensible-access-methods/"/>
    <updated>2016-04-06T15:26:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/04/06/extensible-access-methods</id>
    <content type="html"><![CDATA[<p>PostgreSQL 9.6 receives suitable support of extensible index access methods.
And that’s good news because Postgres was initially designed to support it.</p>

<blockquote>
  <p>“It is imperative that a user be able to construct new access methods to 
provide efficient access to instances of nontraditional base types”</p>

  <p>Michael Stonebraker, Jeff Anton, Michael Hirohama.
Extendability in POSTGRES , IEEE Data Eng. Bull. 10 (2) pp.16-23, 1987</p>
</blockquote>

<p>That was a huge work which consists of multiple steps.</p>

<!--more-->

<ol>
  <li>Rework access method interface so that access method internals are hidden
from SQL level to C level.  Besides help for custom access methods support,
this refactoring is good by itself.<br />
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=65c5fcd353a859da9e61bfb2b92a99f12937de3b">Committed</a>
by Tom Lane.</li>
  <li><code>CREATE ACCESS METHOD</code> command which provides legal way for insertion into
pg_am with support of dependencies and pg_dump/pg_restore.
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=473b93287040b20017cc25a157cffdc5b978c254">Committed</a>
by Alvaro Herrera.</li>
  <li>Generic WAL interface which provides custom access methods the way to be
WAL-logged.  Each built-in access method has its own type of WAL records.
But custom access method shouldn’t because it could affect reliability.
Generic WAL records represent difference between pages in general way as
result of per-byte comparison of original and modified images of the page.
For sure, it is not as efficient as own type of WAL records, but there is
no choice under restrictions we have.
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=65578341af1ae50e52e0f45e691ce88ad5a1b9b1">Committed</a>
by Teodor Sigaev.</li>
  <li>Bloom contrib module which is example of custom index access method which
uses generic WAL interface.  This contrib is essential for testing
infrastructure described above.  Also, this access method could be useful by
itself.
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=9ee014fc899a28a198492b074e32b60ed8915ea9">Committed</a>
by Teodor Sigaev.</li>
</ol>

<p>I am very thankful for the efforts of committers and reviewers who make it
possible to include these features into PostgreSQL.</p>

<p>However, end users don’t really care about this infrastructure.  They do care
about features we can provide on the base of this infrastructure.  Actually,
we would be able to have index access methods which are:</p>

<ul>
  <li>Too hard to add to PostgreSQL core.  For instance, we presented
<a href="https://wiki.postgresql.org/images/2/25/Full-text_search_in_PostgreSQL_in_milliseconds-extended-version.pdf">fast FTS</a>
in 2012.  We have 2 of 4 GIN features committed to core.  And it seems to be
very long way to have rest of features in core.  But since 9.6 we would
provide it as an extension.</li>
  <li>Not patent free.  There are some interesting data structures which are
covered by patents (Fractal Tree index, for example).  This is why they
couldn’t be added to PostgreSQL core.  Since 9.6, they could be provided
without fork.</li>
</ul>

<p>Also, I consider this work as an approach (together with FDW) to pluggable
storage engines.  I will speak about this during my
<a href="http://www.pgcon.org/2016/schedule/events/920.en.html">talk at PGCon 2016</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring Wait Events in PostgreSQL 9.6]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/25/wait_monitoring_9_6/"/>
    <updated>2016-03-25T18:00:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/25/wait_monitoring_9_6</id>
    <content type="html"><![CDATA[<p>Recently Robert Haas
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commit;h=53be0b1add7064ca5db3cd884302dfc3268d884e">committed</a>
which allows seeing some more detailed information about current wait event
of the process.  In particular, user will be able to see if process is waiting
for heavyweight lock, lightweight lock (either individual or tranche) or buffer
pin.  The full list of wait events is available in the
<a href="http://www.postgresql.org/docs/devel/static/monitoring-stats.html#WAIT-EVENT-TABLE">documentation</a>.
Hopefully, it will be more wait events in further releases.</p>

<p>It’s nice to see current wait event of the process, but just one snapshot is
not very descriptive and definitely not enough to do any conclusion.  But
we can use sampling for collecting suitable statistics.  This is why I’d like
to present <a href="https://github.com/postgrespro/pg_wait_sampling">pg_wait_sampling</a>
which automates gathering sampling statistics of wait events.  pg_wait_sampling
enables you to gather statistics for graphs like the one below.</p>

<p><img class="no-border" src="/images/wait_monitoring.png"></p>

<!--more-->

<p>Let me explain you how did I draw this graph. pg_wait_sampling samples wait
events into two destinations: history and profile.  History is an in-memory
ring buffer and profile is an in-memory hash table with accumulated statistics.
We’re going to use the second one to see insensitivity of wait events over time
periods.</p>

<p>At first, let’s create table for accumulated statistics.  I’m doing these
experiments on my laptop, and for the simplicity this table will live in the
instance under monitoring.  But note, that such table could live on the another
server.  I’d even say it’s preferable to place such data to another server.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">profile_log</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">ts</span>         <span class="k">timestamp</span><span class="p">,</span>
</span><span class='line'>    <span class="n">event_type</span> <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>    <span class="n">event</span>      <span class="nb">text</span><span class="p">,</span>
</span><span class='line'>    <span class="k">count</span>      <span class="nb">int8</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Secondly, I wrote a function to copy data from pg_wait_sampling_profile view to
profile_log table and clean profile data.  This function returns number of
rows inserted into profile_log table.  Also, this function discards pid number
and groups data by wait event.  And this is not necessary needed to be so.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">write_profile_log</span><span class="p">()</span> <span class="k">RETURNS</span> <span class="nb">integer</span> <span class="k">AS</span> <span class="o">&lt;</span><span class="n">script</span> <span class="k">type</span><span class="o">=</span><span class="ss">&quot;math/tex&quot;</span><span class="o">&gt;</span><span class="k">DECLARE</span>
</span><span class='line'>    <span class="k">result</span> <span class="nb">integer</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>    <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">profile_log</span>
</span><span class='line'>        <span class="k">SELECT</span> <span class="k">current_timestamp</span><span class="p">,</span> <span class="n">event_type</span><span class="p">,</span> <span class="n">event</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="k">count</span><span class="p">)</span>
</span><span class='line'>        <span class="k">FROM</span> <span class="n">pg_wait_sampling_profile</span>
</span><span class='line'>        <span class="k">WHERE</span> <span class="n">event</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span>
</span><span class='line'>        <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">event_type</span><span class="p">,</span> <span class="n">event</span><span class="p">;</span>
</span><span class='line'>    <span class="k">GET</span> <span class="k">DIAGNOSTICS</span> <span class="k">result</span> <span class="o">=</span> <span class="k">ROW_COUNT</span><span class="p">;</span>
</span><span class='line'>    <span class="n">PERFORM</span> <span class="n">pg_wait_sampling_reset_profile</span><span class="p">();</span>
</span><span class='line'>    <span class="k">RETURN</span> <span class="k">result</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span><span class="o">&lt;/</span><span class="n">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">LANGUAGE</span> <span class="err">‘</span><span class="n">plpgsql</span><span class="err">’</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And then I run psql session where setup watch of this function.  Monitoring of
our system is started.  For real usage it’s better to schedule this command
using cron or something.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">smagen</span><span class="o">@</span><span class="n">postgres</span><span class="o">=#</span> <span class="k">SELECT</span> <span class="n">write_profile_log</span><span class="p">();</span>
</span><span class='line'> <span class="n">write_profile_log</span>
</span><span class='line'><span class="err">——————</span><span class="o">-</span>
</span><span class='line'>                 <span class="mi">0</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">smagen</span><span class="o">@</span><span class="n">postgres</span><span class="o">=#</span> <span class="err">\</span><span class="n">watch</span> <span class="mi">10</span>
</span><span class='line'><span class="n">Fri</span> <span class="n">Mar</span> <span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">09</span> <span class="mi">2016</span> <span class="p">(</span><span class="k">every</span> <span class="mi">10</span><span class="n">s</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span> <span class="n">id</span><span class="o">=</span><span class="ss">&quot;writeprofilelog&quot;</span><span class="o">&gt;</span><span class="n">write_profile_log</span><span class="o">&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>             <span class="mi">0</span> <span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p>We can see that write_profile_log returns 0.  That means we didn’t insert
anything to profile_log.  And this is right because system is not under load
now.  Let us create some load using pgbench.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pgbench -i -s <span class="m">10</span> postgres
</span><span class='line'><span class="nv">$ </span>pgbench -j <span class="m">10</span> -c <span class="m">10</span> -M prepared -T <span class="m">60</span> postgres
</span></code></pre></td></tr></table></div></figure></p>

<p>In the parallel session we can see that write_profile_log starts to insert some
data to profile_log table.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Fri</span> <span class="n">Mar</span> <span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">04</span><span class="p">:</span><span class="mi">19</span> <span class="mi">2016</span> <span class="p">(</span><span class="k">every</span> <span class="mi">10</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'> <span class="n">write_profile_log</span>
</span><span class='line'><span class="err">——————</span><span class="o">-</span>
</span><span class='line'>                 <span class="mi">9</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span> <span class="k">row</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, let’s examine the profile_log table.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">profile_log</span><span class="p">;</span>
</span><span class='line'>             <span class="n">ts</span>             <span class="o">|</span>  <span class="n">event_type</span>   <span class="o">|</span>       <span class="n">event</span>       <span class="o">|</span> <span class="k">count</span>
</span><span class='line'><span class="err">—————————</span><span class="o">-+</span><span class="err">—————</span><span class="o">+</span><span class="err">——————</span><span class="o">-+</span><span class="err">——</span><span class="o">-</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="k">Lock</span>          <span class="o">|</span> <span class="n">tuple</span>             <span class="o">|</span>    <span class="mi">41</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockTranche</span> <span class="o">|</span> <span class="n">lock_manager</span>      <span class="o">|</span>     <span class="mi">1</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockTranche</span> <span class="o">|</span> <span class="n">buffer_content</span>    <span class="o">|</span>    <span class="mi">68</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockTranche</span> <span class="o">|</span> <span class="n">wal_insert</span>        <span class="o">|</span>     <span class="mi">3</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockNamed</span>   <span class="o">|</span> <span class="n">WALWriteLock</span>      <span class="o">|</span>    <span class="mi">68</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="k">Lock</span>          <span class="o">|</span> <span class="n">transactionid</span>     <span class="o">|</span>   <span class="mi">331</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockNamed</span>   <span class="o">|</span> <span class="n">ProcArrayLock</span>     <span class="o">|</span>     <span class="mi">8</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockNamed</span>   <span class="o">|</span> <span class="n">WALBufMappingLock</span> <span class="o">|</span>     <span class="mi">5</span>
</span><span class='line'> <span class="mi">2016</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">25</span> <span class="mi">14</span><span class="p">:</span><span class="mi">03</span><span class="p">:</span><span class="mi">19</span><span class="p">.</span><span class="mi">286394</span> <span class="o">|</span> <span class="n">LWLockNamed</span>   <span class="o">|</span> <span class="n">CLogControlLock</span>   <span class="o">|</span>     <span class="mi">1</span>
</span><span class='line'><span class="err">………………………………………………………………</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>How to interpret these data?  In the first row we can see that count for tuple
lock for 14:03:19 is 41.  The pg_wait_sampling collector samples wait event
every 10 ms while write_profile_log function writes snapshot of profile every
10 s.  Thus, it was 1000 samples during this period.  Taking into account that
it was 10 backends serving pgbench, we can read the first row as “from 14:03:09
to 14:03:19 backends spend about 0.41% of time in waiting for tuple lock”.</p>

<p>That’s it.  This blog post shows how you can setup a wait event monitoring
of your database using
<a href="https://github.com/postgrespro/pg_wait_sampling">pg_wait_sampling</a>
extension with PostgreSQL 9.6.  This example was given just for introduction and
it is simplified in many ways.  But experienced DBAs would easily adopt it for
their setups.</p>

<p>P.S. Every monitoring has some overhead.  Overhead of wait monitoring was
subject of hot debates in mailing lists.  This is why features like exposing
wait events parameters and measuring each wait event individually are not yet
in 9.6.  But sampling also has overhead.  I hope pg_wait_sampling would be a
start point to show on comparison that other approaches are not that bad, and
finally we would have something way more advanced for 9.7.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pg_pathman UPDATE and DELETE Support and Benchmark]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/18/pg_pathman-update-delete-benchmark/"/>
    <updated>2016-03-18T12:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/18/pg_pathman-update-delete-benchmark</id>
    <content type="html"><![CDATA[<p>Recently <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> receives
support of UPDATE and DELETE queries.  Because of some specialties of PostgreSQL
query planner hooks, UPDATE and DELETE planning is accelerated only when only
one partition is touched by query.  Other way, regular slow inheritance query 
planning is used.  However, case when UPDATE and DELETE touches only one
partition seems to be most common and most needing optimization.</p>

<p>Also, I’d like to share some benchmark. This benchmark consists of operations
on journal table with about 1 M records for year partitioned by day.  For sure,
this is kind of toy example, because nobody will split so small amount of data
into so many partitions.  But it is still good to see partitioning overhead.
Performance of following operations was compared:</p>

<ul>
  <li>Select single row by its timestamp,</li>
  <li>Select data for whole day (whole one partition),</li>
  <li>Insert one row with random timestamp,</li>
  <li>Update one row with random timestamp.</li>
</ul>

<p>The following partitioning methods were compared:</p>

<ul>
  <li>Single table, no partitioning,</li>
  <li>pg_partman extension,</li>
  <li>pg_pathman extension.</li>
</ul>

<p>Benchmarks were done on 2 x Intel Xeon CPU X5675 @ 3.07GHz, 24 GB of memory
server with fsync = off in 10 threads. See the results below.</p>

<p><img class="no-border" src="/images/pg_pathman_benchmarks.png"></p>

<table>
  <thead>
    <tr>
      <th>Test name</th>
      <th style="text-align: right">single table, TPS</th>
      <th style="text-align: right">pg_partman, TPS</th>
      <th style="text-align: right">pg_pathman, TPS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Select one row</td>
      <td style="text-align: right">47973</td>
      <td style="text-align: right">1084</td>
      <td style="text-align: right">41775</td>
    </tr>
    <tr>
      <td>Select whole one partition</td>
      <td style="text-align: right">2302</td>
      <td style="text-align: right">704</td>
      <td style="text-align: right">2556</td>
    </tr>
    <tr>
      <td>Insert one row</td>
      <td style="text-align: right">34401</td>
      <td style="text-align: right">7969</td>
      <td style="text-align: right">25859</td>
    </tr>
    <tr>
      <td>Update one row</td>
      <td style="text-align: right">32769</td>
      <td style="text-align: right">202</td>
      <td style="text-align: right">29289</td>
    </tr>
  </tbody>
</table>

<!--more-->

<p>I can make following highlights for these results.</p>

<ul>
  <li>pg_pathman is dramatically faster than pg_partman, because pg_pathman uses
planner hooks for faster query planning while pg_partman uses built-in
inheritance mechanism.</li>
  <li>When selecting or updating a single row, pg_pathman is almost as fast as plain
table.  The difference for insertion of single row is slightly bigger because
trigger is used for that.</li>
  <li>The difference between pg_partman and pg_pathman when selecting the whole
partition is not as dramatic as when selecting the one row.  This is why
planning time becomes less substantial in comparison with execution time.</li>
  <li>Inserting random rows with pg_pathman is still much faster than with
pg_partman while both of them use trigger on parent relation.  However,
pg_pathman uses fast C-function for partition selection.</li>
  <li>Selecting the whole partition when table is partitioned by pg_pathman is
slightly faster than selecting same rows from plain table.  This is because
sequential scan was used for selecting whole partition while index scan
was used for selecting part of plain table.  When among of data is big and
doesn’t fit cache this difference is expected to be much more.</li>
</ul>

<p>See <a href="https://gist.github.com/akorotkov/0d558a6e1b5ea176813a">this gist</a> for
SQL-scripts used for benchmarking.</p>

<ul>
  <li>create_*.sql creates journal table using various partitioning methods.</li>
  <li>select_one.sql, select_day.sql, insert.sql and update.sql are pg_bench
scripts.</li>
</ul>

<p>P.S. This post is not a criticism of pg_partman.  It was developed long time
before extendability mechanisms which pg_pathman use were created.  And it is
a great extension which has served many years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does Pg_pathman Handle Filter Conditions?]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/14/pg_pathman-condition-processing/"/>
    <updated>2016-03-14T11:10:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/14/pg_pathman-condition-processing</id>
    <content type="html"><![CDATA[<p><img class="no-border right" src="/images/filter_data_icon.jpg"></p>

<p>In my <a href="/blog/2016/03/04/pg_pathman-beta-release/">previous post</a> I’ve
introduced <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> as an
extension which accelerate query planning over partitioned tables.  In this post
I would like to covert another aspect of pg_pathman: it not only produce  plans
faster, but also produce better plans.  Thanks to it query execution with
pg_pathman becomes much faster in some cases.</p>

<p>When you search partitioned table with some filter conditions, pg_pathman adopts
this filter to each individual partition.  Therefore, each partition receives
the only filter conditions which are useful to check against it.</p>

<p>Let me illustrate this on the example.  At first, let’s see what’s happening
with filter conditions while dealing with PostgreSQL inheritance mechanism.</p>

<!--more-->

<p>Let us make some partitioned table using inheritance.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span> <span class="k">timestamp</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">title</span> <span class="nb">text</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_ts_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_1</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_2</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_3</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_4</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_5</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_6</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And them fill it with test data.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_1</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_2</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">28</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_3</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_4</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">30</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_5</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_6</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">30</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then let’s try to select rows from two time intervals.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span><span class="p">)</span> <span class="k">OR</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                                                                                                                    <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————————————————————————————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="n">Append</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">5028</span><span class="p">.</span><span class="mi">22</span> <span class="k">rows</span><span class="o">=</span><span class="mi">128059</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_2</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">1183</span><span class="p">.</span><span class="mi">40</span> <span class="k">rows</span><span class="o">=</span><span class="mi">40320</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_3</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">444</span><span class="p">.</span><span class="mi">46</span><span class="p">..</span><span class="mi">1266</span><span class="p">.</span><span class="mi">02</span> <span class="k">rows</span><span class="o">=</span><span class="mi">20178</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>         <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">BitmapOr</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">444</span><span class="p">.</span><span class="mi">46</span><span class="p">..</span><span class="mi">444</span><span class="p">.</span><span class="mi">46</span> <span class="k">rows</span><span class="o">=</span><span class="mi">20178</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_3_ts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">430</span><span class="p">.</span><span class="mi">07</span> <span class="k">rows</span><span class="o">=</span><span class="mi">20178</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_3_ts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">4</span><span class="p">.</span><span class="mi">30</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_5</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">1310</span><span class="p">.</span><span class="mi">80</span> <span class="k">rows</span><span class="o">=</span><span class="mi">24360</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_6</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">1268</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">43200</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="mi">16</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can see that filter condition was passed to each partition as is.  But
actually it could be simplified a lot.  For instance, table test_2 could be scan
without filter condition at all because all its rows are matching.  Filter
condition to test_3 could be simplified to <code>ts &lt; '2015-03-15'</code>, therefore
BitmapOr is not necessary.</p>

<p>Let’s try the same example with
<a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.  Firstly create test
table and its partitions.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span> <span class="k">timestamp</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">title</span> <span class="nb">text</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_ts_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span><span class="p">);</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">create_range_partitions</span><span class="p">(</span><span class="err">‘</span><span class="n">test</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">ts</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">month</span><span class="err">’</span><span class="p">::</span><span class="nb">interval</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then insert test data into table.  pg_pathman automatically creates trigger
which distribute data between partitions. Just like pg_partman does.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">181</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And finally try the same query with pg_pathman.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span><span class="p">)</span> <span class="k">OR</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                     <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">————————————————————————————</span>
</span><span class='line'> <span class="n">Append</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">3248</span><span class="p">.</span><span class="mi">59</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_2</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">780</span><span class="p">.</span><span class="mi">20</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="k">Index</span> <span class="n">Scan</span> <span class="k">using</span> <span class="n">test_3_ts_idx</span> <span class="k">on</span> <span class="n">test_3</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">29</span><span class="p">..</span><span class="mi">767</span><span class="p">.</span><span class="mi">99</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_5</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">864</span><span class="p">.</span><span class="mi">40</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_6</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">836</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">7</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can see that pg_pathman selects the same partitions, but query plan becomes
way simpler.  Now, test_2 is scanned without useless filter condition.  test_3
is scanned using just <code>ts &lt; '2015-03-15'</code> filter condition.  Thanks to it, plain
Index Scan is used instead of BitmapOr.  And similar advances was applied to
rest of partitions.</p>

<p>How was this simplification possible?  The common fear here is that such
simplification could be computational expensive in general case.  But since
pg_pathman is intended to decrease query planning time, it’s very important to
keep all transformations cheap and simple.  And this cheap and simple algorithm
of transformation really exists.</p>

<p>Let’s see how it works on simple example. The filter condition <code>(ts &gt;=
'2015-02-01' AND ts &lt; '2015-03-15') OR (ts &gt;= '2015-05-15' AND ts &lt;
'2015-07-01')</code> have following tree representation.</p>

<p><img class="no-border center" src="/images/pg_pathman_condition_1.png"></p>

<p>Leaf nodes of tree are simple conditions.  Non-leaf nodes are logical operators
which forms complex conditions.  For particular partition each filter condition
(either simple or complex) could be treated into one of three classes.</p>

<ol>
  <li>
    <p>Filter condition is always true for rows of this partition (t).  For
instance, condition <code>ts &gt;= '2015-04-15'</code> is always true for partition <code>ts &gt;=
2015-05-01 AND ts &lt; 2015-06-01</code>.</p>
  </li>
  <li>
    <p>Filter condition could be either true or false for rows of this partition
(m). For instance, condition <code>ts &gt;= '2015-03-15'</code> could be either true or
false for partition <code>ts &gt;= 2015-03-01 AND ts &lt; 2015-03-01</code>.</p>
  </li>
  <li>
    <p>Filter condition is always false for rows of this partition (f).  For
instance, condition <code>ts &lt;= '2015-02-01'</code> is always false for partition <code>ts &gt;=
2015-04-01 AND ts &lt; 2015-04-01</code>.</p>
  </li>
</ol>

<p>We can mark each tree node with vector of classes which corresponding condition
is treated against each partition.  These vectors could be filled upwards: for
leaf nodes first, and then for non-leaf nodes using tri-state logic.</p>

<p><img class="no-border center" src="/images/pg_pathman_condition_2.png"></p>

<p>It’s evident that only conditions which could be either true or false (m) are
useful for filtering.  Conditions which are always true or always false
shouldn’t be presented in the partitions filter.  Using produced three we can
now produce filter conditions for each partition.</p>

<ol>
  <li>
    <p>For <code>ts &gt;= 2015-01-01 AND ts &lt; 2015-02-01</code> partition, whole filter condition
is false. So, skip it.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-02-01 AND ts &lt; 2015-03-01</code> partition, whole filter condition
is true. So, scan it without filter.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-03-01 AND ts &lt; 2015-04-01</code> partition, filter condition tree
would be reduced into following tree.</p>

    <p><img class="no-border center" src="/images/pg_pathman_condition_3.png"></p>

    <p>Therefore, this partition will be scan with <code>ts &lt; '2015-03-15'</code> filter.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-04-01 AND ts &lt; 2015-05-01</code> partition, whole filter condition
is false. So, skip it.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-05-01 AND ts &lt; 2015-06-01</code> partition, filter condition tree
would be reduced into following tree.</p>

    <p><img class="no-border center" src="/images/pg_pathman_condition_4.png"></p>

    <p>Therefore, this partition will be scan with <code>ts &gt;= '2015-05-15'</code> filter.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-06-01 AND ts &lt; 2015-07-01</code> partition, whole filter condition
is true. So, scan it without filter.</p>
  </li>
</ol>

<p>This is how filter conditions processing works in
<a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.  The explanation could
be a bit exhausting for reading, but I hope you feel enlighten by getting how it
works.  I remember that pg_pathman is open source extension for PostgreSQL 9.5
in beta-release stage.  I appeal to everyone interested for trying it and
sharing a feedback.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pg_pathman Beta Release]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release/"/>
    <updated>2016-03-04T17:10:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release</id>
    <content type="html"><![CDATA[<p><img class="no-border" src="/images/partitiontable.jpg"></p>

<p>Partitioning in PostgreSQL is traditionally implemented using <a href="http://www.postgresql.org/docs/9.5/static/ddl-partitioning.html">table
inheritance</a>.
Table inheritance allow planner to include into plan only those child tables
(partitions) which are compatible with query.  Simultaneously a lot of work on
partitions management remains on users: create inherited tables, writing trigger
which selects appropriate partition for row inserting etc.  In order to automate
this work pg_partman extension was written.  Also, there is upcoming work on
<a href="http://www.postgresql.org/message-
id/55D3093C.5010800@lab.ntt.co.jp">declarative partitioning</a> by Amit Langote for PostgreSQL core.</p>

<p>In Postgres Professional we notice performance problem of inheritance based
partitioning.  The problem is that planner selects children tables compatible
with query by linear scan.  Thus, for query which selects just one row from one
partition it would be much slower to plan than to execute.  This fact
discourages many users and this is why we’re working on new PostgreSQL
extension: <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> caches partitions
meta-information and uses set_rel_pathlist hook in order to replace mechanism of
child tables selection by its own mechanism.  Thanks to this binary search
algorithm over sorted array is used for range partitioning and hash table
lookup for hash partitioning.  Therefore, time spent to partition selection
appears to be negligible in comparison with forming of result plan nodes.  See
<a href="http://www.postgrespro.com/blog/pgsql/pg_pathman">postgrespro blog post</a> for
performance benchmarks.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> now in beta-release
status and we encourage all interested users to try it and give us a feedback.
pg_pathman is compatible with PostgreSQL 9.5 and distributed under PostgreSQL
license.  In the future we’re planning to enhance functionality of pg_pathman
by following features.</p>

<ul>
  <li>Execute time selection of partitions using custom nodes (useful for nested
loops and prepared statements);</li>
  <li>Optimization of ordering output from partitioned tables (useful for merge
join and order by);</li>
  <li>Optimization of hash join when both tables are partitioned by join key;</li>
  <li>LIST-partitioning;</li>
  <li>HASH-partitioning by attributes of any hashable type.</li>
</ul>

<p>Despite we have pg_pathman useful here and now, we want this functionality to
eventually become part of PostgreSQL core.  This is why we are going to join
work on declarative partitioning by Amit Langote which have excellent DDL
infrastructure and fulfill it with effective internal algorithms.</p>
]]></content>
  </entry>
  
</feed>

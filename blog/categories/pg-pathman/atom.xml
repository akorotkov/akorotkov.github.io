<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pg_pathman | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/pg-pathman/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2016-03-04T17:59:31+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pg_pathman Beta Release]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release/"/>
    <updated>2016-03-04T17:10:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release</id>
    <content type="html"><![CDATA[<p><img class="no-border" src="/images/partitiontable.jpg"></p>

<p>Partitioning in PostgreSQL is traditionally implemented using <a href="http://www.postgresql.org/docs/9.5/static/ddl-partitioning.html">table inheritance</a>. Table inheritance allow planner to include into plan only those child tables (partitions) which are compatible with query.  Simultaneously a lot of work on partitions management remains on users: create inherited tables, writing trigger which selects appropriate partition for row inserting etc.  In order to automate this work pg_partman extension was written.  Also, there is upcoming work on <a href="http://www.postgresql.org/message-id/55D3093C.5010800@lab.ntt.co.jp">declarative partitioning</a> by Amit Langote for PostgreSQL core.</p>

<p>In Postgres Professional we notice performance problem of inheritance based partitioning.  The problem is that planner selects children tables compatible with query by linear scan.  Thus, for query which selects just one row from one partition it would be much slower to plan than to execute.  This fact discourages many users and this is why we&rsquo;re working on new PostgreSQL extension: <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> caches partitions meta-information and uses set_rel_pathlist hook in order to replace mechanism of child tables selection by its own mechanism.  Thanks to this binary search algorithm over sorted array is used for range partitioning and hash table lookup for hash partitioning.  Therefore, time spent to partition selection appears to be negligible in comparison with forming of result plan nodes.  See <a href="http://www.postgrespro.com/blog/pgsql/pg_pathman">postgrespro blog post</a> for performance benchmarks.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> now in beta-release status and we encourage all interested users to try it and give us a feedback.  pg_pathman is compatible with PostgreSQL 9.5 and distributed under PostgreSQL license.  In the future we&rsquo;re planning to enhance functionality of pg_pathman by following features.</p>

<ul>
<li>Execute time selection of partitions using custom nodes (useful for nested loops and prepared statements);</li>
<li>Optimization of ordering output from partitioned tables (useful for merge join and order by);</li>
<li>Optimization of hash join when both tables are partitioned by join key;</li>
<li>LIST-partitioning;</li>
<li>HASH-partitioning by attributes of any hashable type.</li>
</ul>


<p>Despite we have pg_pathman useful here and now, we want this functionality to eventually become part of PostgreSQL core.  This is why we are going to join work on declarative partitioning by Amit Langote which have excellent DDL infrastructure and fulfill it with effective internal algorithms.</p>
]]></content>
  </entry>
  
</feed>

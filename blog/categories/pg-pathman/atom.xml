<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pg_pathman | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/pg-pathman/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2017-05-31T18:32:17+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RuntimeAppend in Pg_pathman: Achievements and New Challenges]]></title>
    <link href="http://akorotkov.github.io/blog/2016/06/15/pg_pathman-runtime-append/"/>
    <updated>2016-06-15T15:00:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/06/15/pg_pathman-runtime-append</id>
    <content type="html"><![CDATA[<p>Dealing with partitioned tables we can’t always select relevant partitions
during query planning.  Naturally, during query planning you can’t know values
which come from subquery or outer part of nested loop join.  Nevertheless, it
would be ridiculous to scan all the partitions in such cases.</p>

<p>This is why my Postgres Professional colleague Dmitry Ivanov developed a
new custom executor node for pg_pathman: RuntimeAppend.  This node behaves
like regular Append node: it contains set of children Nodes which should be
appended.  However, RuntimeAppend have one distinction: each run it selects
only relevant children to append basing on parameter values.</p>

<!--more-->

<p>Let’s consider example: join of <code>journal</code> table which contains row per each
30 seconds of year partitioned by day, and <code>q</code> table which refers 1000 random
rows of <code>journal</code> table.  Without RuntimeAppend optimizer selects Hash Join
plan.</p>

<p><code>sql Regular Append: Hash Join
# EXPLAIN ANALYZE SELECT * FROM q JOIN journal j ON q.dt = j.dt;
                                                          QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------
 Hash Join  (cost=27.50..25442.51 rows=1000 width=56) (actual time=0.479..252.506 rows=1000 loops=1)
   Hash Cond: (j.dt = q.dt)
   -&gt;  Append  (cost=0.00..21463.01 rows=1051201 width=49) (actual time=0.005..152.258 rows=1051201 loops=1)
         -&gt;  Seq Scan on journal_1 j  (cost=0.00..58.80 rows=2880 width=49) (actual time=0.004..0.247 rows=2880 loops=1)
         -&gt;  Seq Scan on journal_2 j_1  (cost=0.00..58.80 rows=2880 width=49) (actual time=0.001..0.208 rows=2880 loops=1)
         -&gt;  Seq Scan on journal_3 j_2  (cost=0.00..58.80 rows=2880 width=49) (actual time=0.001..0.197 rows=2880 loops=1)
...............................................................................................................................
         -&gt;  Seq Scan on journal_366 j_365  (cost=0.00..1.01 rows=1 width=49) (actual time=0.001..0.001 rows=1 loops=1)
   -&gt;  Hash  (cost=15.00..15.00 rows=1000 width=8) (actual time=0.185..0.185 rows=1000 loops=1)
         Buckets: 1024  Batches: 1  Memory Usage: 48kB
         -&gt;  Seq Scan on q  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.003..0.074 rows=1000 loops=1)
 Planning time: 29.262 ms
 Execution time: 256.337 ms
(374 rows)
</code></p>

<p>The Hash Join execution takes 256 milliseconds for execution and 29 milliseconds
for planning.  Relatively high planning time is expected because all the
partitions are present in plan.  It’s surprising that optimizer didn’t select
Nested Loop join.  Let’s force it to do so by <code>enable_hashjoin = off</code> and
<code>enable_mergejoin = off</code>.</p>

<p><code>sql Regular Append: Nested Loop
# EXPLAIN ANALYZE SELECT * FROM q JOIN journal j ON q.dt = j.dt;
                                                                      QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.28..170817.00 rows=1000 width=56) (actual time=1.091..452.658 rows=1000 loops=1)
   -&gt;  Seq Scan on q  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.006..0.158 rows=1000 loops=1)
   -&gt;  Append  (cost=0.28..167.14 rows=366 width=49) (actual time=0.218..0.438 rows=1 loops=1000)
         -&gt;  Index Scan using journal_1_dt_idx on journal_1 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_2_dt_idx on journal_2 j_1  (cost=0.28..0.46 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_3_dt_idx on journal_3 j_2  (cost=0.28..0.46 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
......................................................................................................................................................
         -&gt;  Index Scan using journal_366_dt_idx on journal_366 j_365  (cost=0.12..0.15 rows=1 width=49) (actual time=0.001..0.001 rows=0 loops=1000)
               Index Cond: (dt = q.dt)
 Planning time: 29.922 ms
 Execution time: 456.140 ms
(737 rows)
</code></p>

<p>The Nested Loop join takes 456 milliseconds to execute.  This is even worse.
But this is understandable because we have to scan each partition of <code>journal</code>
for each row of <code>q</code>.</p>

<p>Finally, let’s enable RuntimeAppend.</p>

<p><code>sql RuntimeAppend
# EXPLAIN ANALYZE SELECT * FROM q JOIN journal j ON q.dt = j.dt;
                                                                   QUERY PLAN
------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.28..481.67 rows=1000 width=56) (actual time=0.041..9.911 rows=1000 loops=1)
   -&gt;  Seq Scan on q  (cost=0.00..15.00 rows=1000 width=8) (actual time=0.005..0.079 rows=1000 loops=1)
   -&gt;  Custom Scan (RuntimeAppend)  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=1000)
         -&gt;  Index Scan using journal_330_dt_idx on journal_330 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=5)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_121_dt_idx on journal_121 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.004..0.004 rows=1 loops=1)
               Index Cond: (dt = q.dt)
         -&gt;  Index Scan using journal_37_dt_idx on journal_37 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=4)
               Index Cond: (dt = q.dt)
................................................................................................................................................
         -&gt;  Index Scan using journal_355_dt_idx on journal_355 j  (cost=0.28..0.46 rows=1 width=49) (actual time=0.003..0.003 rows=1 loops=1)
               Index Cond: (dt = q.dt)
 Planning time: 30.775 ms
 Execution time: 8.615 ms
(687 rows)
</code></p>

<p>The Nested Loop join with RuntimeAppend takes only about 9 milliseconds
to execute!  Such fast execution is possible thanks to RuntimeAppend scans only
one relevant partition of <code>journal</code> for each row of <code>q</code>.</p>

<p>Nevertheless, all the partitions are present in plan and planning time is still
quite high.  This relatively high planning time could be not so significant
for prepared statements or long OLAP queries.</p>

<p>However, long planning time appears to be not the only problem.  We run a
benchmark when RuntimeAppend node returns just a few rows in prepared statement.
Despite high planning time doesn’t affect prepared statements, TPS was few
time slower than it was without partitioning.  After running perf, we got this
<a href="/images/runtimeappend_flamegraph.svg">flamegraph</a>.  This flamegraph shows that
we spend very significant time for locking and unlocking every partition.
Naturally, locking 365 partitions isn’t using fast-path locking and appears to
be significant overhead.</p>

<p>Thus, we see how huge benefit could runtime partition selection have.  However,
in current design having all the partitions in plan cause high overhead.
Solution could be found in redesigning partition locking.  We are researching
this problem now.  It’s likely this problem can’t be solved in the boundaries
of extension and proper solution requires hacking of PostgreSQL core.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pg_pathman UPDATE and DELETE Support and Benchmark]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/18/pg_pathman-update-delete-benchmark/"/>
    <updated>2016-03-18T12:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/18/pg_pathman-update-delete-benchmark</id>
    <content type="html"><![CDATA[<p>Recently <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> receives
support of UPDATE and DELETE queries.  Because of some specialties of PostgreSQL
query planner hooks, UPDATE and DELETE planning is accelerated only when only
one partition is touched by query.  Other way, regular slow inheritance query 
planning is used.  However, case when UPDATE and DELETE touches only one
partition seems to be most common and most needing optimization.</p>

<p>Also, I’d like to share some benchmark. This benchmark consists of operations
on journal table with about 1 M records for year partitioned by day.  For sure,
this is kind of toy example, because nobody will split so small amount of data
into so many partitions.  But it is still good to see partitioning overhead.
Performance of following operations was compared:</p>

<ul>
  <li>Select single row by its timestamp,</li>
  <li>Select data for whole day (whole one partition),</li>
  <li>Insert one row with random timestamp,</li>
  <li>Update one row with random timestamp.</li>
</ul>

<p>The following partitioning methods were compared:</p>

<ul>
  <li>Single table, no partitioning,</li>
  <li>pg_partman extension,</li>
  <li>pg_pathman extension.</li>
</ul>

<p>Benchmarks were done on 2 x Intel Xeon CPU X5675 @ 3.07GHz, 24 GB of memory
server with fsync = off in 10 threads. See the results below.</p>

<p><img class="no-border" src="/images/pg_pathman_benchmarks.png" width="676" height="445"></p>

<table>
  <thead>
    <tr>
      <th>Test name</th>
      <th style="text-align: right">single table, TPS</th>
      <th style="text-align: right">pg_partman, TPS</th>
      <th style="text-align: right">pg_pathman, TPS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Select one row</td>
      <td style="text-align: right">47973</td>
      <td style="text-align: right">1084</td>
      <td style="text-align: right">41775</td>
    </tr>
    <tr>
      <td>Select whole one partition</td>
      <td style="text-align: right">2302</td>
      <td style="text-align: right">704</td>
      <td style="text-align: right">2556</td>
    </tr>
    <tr>
      <td>Insert one row</td>
      <td style="text-align: right">34401</td>
      <td style="text-align: right">7969</td>
      <td style="text-align: right">25859</td>
    </tr>
    <tr>
      <td>Update one row</td>
      <td style="text-align: right">32769</td>
      <td style="text-align: right">202</td>
      <td style="text-align: right">29289</td>
    </tr>
  </tbody>
</table>

<!--more-->

<p>I can make following highlights for these results.</p>

<ul>
  <li>pg_pathman is dramatically faster than pg_partman, because pg_pathman uses
planner hooks for faster query planning while pg_partman uses built-in
inheritance mechanism.</li>
  <li>When selecting or updating a single row, pg_pathman is almost as fast as plain
table.  The difference for insertion of single row is slightly bigger because
trigger is used for that.</li>
  <li>The difference between pg_partman and pg_pathman when selecting the whole
partition is not as dramatic as when selecting the one row.  This is why
planning time becomes less substantial in comparison with execution time.</li>
  <li>Inserting random rows with pg_pathman is still much faster than with
pg_partman while both of them use trigger on parent relation.  However,
pg_pathman uses fast C-function for partition selection.</li>
  <li>Selecting the whole partition when table is partitioned by pg_pathman is
slightly faster than selecting same rows from plain table.  This is because
sequential scan was used for selecting whole partition while index scan
was used for selecting part of plain table.  When among of data is big and
doesn’t fit cache this difference is expected to be much more.</li>
</ul>

<p>See <a href="https://gist.github.com/akorotkov/0d558a6e1b5ea176813a">this gist</a> for
SQL-scripts used for benchmarking.</p>

<ul>
  <li>create_*.sql creates journal table using various partitioning methods.</li>
  <li>select_one.sql, select_day.sql, insert.sql and update.sql are pg_bench
scripts.</li>
</ul>

<p>P.S. This post is not a criticism of pg_partman.  It was developed long time
before extendability mechanisms which pg_pathman use were created.  And it is
a great extension which has served many years.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Does Pg_pathman Handle Filter Conditions?]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/14/pg_pathman-condition-processing/"/>
    <updated>2016-03-14T11:10:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/14/pg_pathman-condition-processing</id>
    <content type="html"><![CDATA[<p><img class="no-border right" src="/images/filter_data_icon.jpg" width="256" height="256"></p>

<p>In my <a href="/blog/2016/03/04/pg_pathman-beta-release/">previous post</a> I’ve
introduced <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> as an
extension which accelerate query planning over partitioned tables.  In this post
I would like to covert another aspect of pg_pathman: it not only produce  plans
faster, but also produce better plans.  Thanks to it query execution with
pg_pathman becomes much faster in some cases.</p>

<p>When you search partitioned table with some filter conditions, pg_pathman adopts
this filter to each individual partition.  Therefore, each partition receives
the only filter conditions which are useful to check against it.</p>

<p>Let me illustrate this on the example.  At first, let’s see what’s happening
with filter conditions while dealing with PostgreSQL inheritance mechanism.</p>

<!--more-->

<p>Let us make some partitioned table using inheritance.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span> <span class="k">timestamp</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">title</span> <span class="nb">text</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_ts_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_1</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_2</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_3</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_4</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_5</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test_6</span> <span class="p">(</span><span class="k">LIKE</span> <span class="n">test</span> <span class="k">INCLUDING</span> <span class="n">INDEXES</span><span class="p">,</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="p">))</span> <span class="k">INHERITS</span> <span class="p">(</span><span class="n">test</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And them fill it with test data.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_1</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_2</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">28</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_3</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_4</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">30</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_5</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test_6</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">30</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then let’s try to select rows from two time intervals.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span><span class="p">)</span> <span class="k">OR</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                                                                                                                    <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————————————————————————————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="n">Append</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">5028</span><span class="p">.</span><span class="mi">22</span> <span class="k">rows</span><span class="o">=</span><span class="mi">128059</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_2</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">1183</span><span class="p">.</span><span class="mi">40</span> <span class="k">rows</span><span class="o">=</span><span class="mi">40320</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_3</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">444</span><span class="p">.</span><span class="mi">46</span><span class="p">..</span><span class="mi">1266</span><span class="p">.</span><span class="mi">02</span> <span class="k">rows</span><span class="o">=</span><span class="mi">20178</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>         <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">BitmapOr</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">444</span><span class="p">.</span><span class="mi">46</span><span class="p">..</span><span class="mi">444</span><span class="p">.</span><span class="mi">46</span> <span class="k">rows</span><span class="o">=</span><span class="mi">20178</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_3_ts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">430</span><span class="p">.</span><span class="mi">07</span> <span class="k">rows</span><span class="o">=</span><span class="mi">20178</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span>
</span><span class='line'>               <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_3_ts_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">4</span><span class="p">.</span><span class="mi">30</span> <span class="k">rows</span><span class="o">=</span><span class="mi">1</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                     <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_5</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">1310</span><span class="p">.</span><span class="mi">80</span> <span class="k">rows</span><span class="o">=</span><span class="mi">24360</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_6</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">1268</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">43200</span> <span class="n">width</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">))</span> <span class="k">OR</span> <span class="p">((</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span> <span class="k">AND</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="mi">16</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can see that filter condition was passed to each partition as is.  But
actually it could be simplified a lot.  For instance, table test_2 could be scan
without filter condition at all because all its rows are matching.  Filter
condition to test_3 could be simplified to <code>ts &lt; '2015-03-15'</code>, therefore
BitmapOr is not necessary.</p>

<p>Let’s try the same example with
<a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.  Firstly create test
table and its partitions.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span> <span class="k">timestamp</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span> <span class="n">title</span> <span class="nb">text</span><span class="p">);</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_ts_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">(</span><span class="n">ts</span><span class="p">);</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">create_range_partitions</span><span class="p">(</span><span class="err">‘</span><span class="n">test</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">ts</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span><span class="p">,</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">month</span><span class="err">’</span><span class="p">::</span><span class="nb">interval</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then insert test data into table.  pg_pathman automatically creates trigger
which distribute data between partitions. Just like pg_partman does.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">test</span> <span class="p">(</span><span class="k">SELECT</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="nb">interval</span> <span class="err">‘</span><span class="mi">1</span> <span class="k">minute</span><span class="err">’</span><span class="p">,</span> <span class="n">md5</span><span class="p">(</span><span class="n">i</span><span class="p">::</span><span class="nb">text</span><span class="p">)</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1440</span> <span class="o">*</span> <span class="mi">181</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="n">i</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And finally try the same query with pg_pathman.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="k">EXPLAIN</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span><span class="p">)</span> <span class="k">OR</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span> <span class="k">AND</span> <span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">07</span><span class="o">-</span><span class="mi">01</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'>                                     <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">————————————————————————————</span>
</span><span class='line'> <span class="n">Append</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">3248</span><span class="p">.</span><span class="mi">59</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_2</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">780</span><span class="p">.</span><span class="mi">20</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="k">Index</span> <span class="n">Scan</span> <span class="k">using</span> <span class="n">test_3_ts_idx</span> <span class="k">on</span> <span class="n">test_3</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">29</span><span class="p">..</span><span class="mi">767</span><span class="p">.</span><span class="mi">99</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_5</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">864</span><span class="p">.</span><span class="mi">40</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>         <span class="n">Filter</span><span class="p">:</span> <span class="p">(</span><span class="n">ts</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="err">‘</span><span class="mi">2015</span><span class="o">-</span><span class="mi">05</span><span class="o">-</span><span class="mi">15</span> <span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="p">:</span><span class="mi">00</span><span class="err">’</span><span class="p">::</span><span class="k">timestamp</span> <span class="k">without</span> <span class="n">time</span> <span class="k">zone</span><span class="p">)</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_6</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">836</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">0</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">7</span> <span class="k">rows</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We can see that pg_pathman selects the same partitions, but query plan becomes
way simpler.  Now, test_2 is scanned without useless filter condition.  test_3
is scanned using just <code>ts &lt; '2015-03-15'</code> filter condition.  Thanks to it, plain
Index Scan is used instead of BitmapOr.  And similar advances was applied to
rest of partitions.</p>

<p>How was this simplification possible?  The common fear here is that such
simplification could be computational expensive in general case.  But since
pg_pathman is intended to decrease query planning time, it’s very important to
keep all transformations cheap and simple.  And this cheap and simple algorithm
of transformation really exists.</p>

<p>Let’s see how it works on simple example. The filter condition <code>(ts &gt;=
'2015-02-01' AND ts &lt; '2015-03-15') OR (ts &gt;= '2015-05-15' AND ts &lt;
'2015-07-01')</code> have following tree representation.</p>

<p><img class="no-border center" src="/images/pg_pathman_condition_1.png" width="483" height="123"></p>

<p>Leaf nodes of tree are simple conditions.  Non-leaf nodes are logical operators
which forms complex conditions.  For particular partition each filter condition
(either simple or complex) could be treated into one of three classes.</p>

<ol>
  <li>
    <p>Filter condition is always true for rows of this partition (t).  For
instance, condition <code>ts &gt;= '2015-04-15'</code> is always true for partition <code>ts &gt;=
2015-05-01 AND ts &lt; 2015-06-01</code>.</p>
  </li>
  <li>
    <p>Filter condition could be either true or false for rows of this partition
(m). For instance, condition <code>ts &gt;= '2015-03-15'</code> could be either true or
false for partition <code>ts &gt;= 2015-03-01 AND ts &lt; 2015-03-01</code>.</p>
  </li>
  <li>
    <p>Filter condition is always false for rows of this partition (f).  For
instance, condition <code>ts &lt;= '2015-02-01'</code> is always false for partition <code>ts &gt;=
2015-04-01 AND ts &lt; 2015-04-01</code>.</p>
  </li>
</ol>

<p>We can mark each tree node with vector of classes which corresponding condition
is treated against each partition.  These vectors could be filled upwards: for
leaf nodes first, and then for non-leaf nodes using tri-state logic.</p>

<p><img class="no-border center" src="/images/pg_pathman_condition_2.png" width="543" height="144"></p>

<p>It’s evident that only conditions which could be either true or false (m) are
useful for filtering.  Conditions which are always true or always false
shouldn’t be presented in the partitions filter.  Using produced three we can
now produce filter conditions for each partition.</p>

<ol>
  <li>
    <p>For <code>ts &gt;= 2015-01-01 AND ts &lt; 2015-02-01</code> partition, whole filter condition
is false. So, skip it.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-02-01 AND ts &lt; 2015-03-01</code> partition, whole filter condition
is true. So, scan it without filter.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-03-01 AND ts &lt; 2015-04-01</code> partition, filter condition tree
would be reduced into following tree.</p>

    <p><img class="no-border center" src="/images/pg_pathman_condition_3.png" width="123" height="103"></p>

    <p>Therefore, this partition will be scan with <code>ts &lt; '2015-03-15'</code> filter.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-04-01 AND ts &lt; 2015-05-01</code> partition, whole filter condition
is false. So, skip it.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-05-01 AND ts &lt; 2015-06-01</code> partition, filter condition tree
would be reduced into following tree.</p>

    <p><img class="no-border center" src="/images/pg_pathman_condition_4.png" width="123" height="103"></p>

    <p>Therefore, this partition will be scan with <code>ts &gt;= '2015-05-15'</code> filter.</p>
  </li>
  <li>
    <p>For <code>ts &gt;= 2015-06-01 AND ts &lt; 2015-07-01</code> partition, whole filter condition
is true. So, scan it without filter.</p>
  </li>
</ol>

<p>This is how filter conditions processing works in
<a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.  The explanation could
be a bit exhausting for reading, but I hope you feel enlighten by getting how it
works.  I remember that pg_pathman is open source extension for PostgreSQL 9.5
in beta-release stage.  I appeal to everyone interested for trying it and
sharing a feedback.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pg_pathman Beta Release]]></title>
    <link href="http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release/"/>
    <updated>2016-03-04T17:10:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2016/03/04/pg_pathman-beta-release</id>
    <content type="html"><![CDATA[<p><img class="no-border" src="/images/partitiontable.jpg" width="640" height="373"></p>

<p>Partitioning in PostgreSQL is traditionally implemented using <a href="http://www.postgresql.org/docs/9.5/static/ddl-partitioning.html">table
inheritance</a>.
Table inheritance allow planner to include into plan only those child tables
(partitions) which are compatible with query.  Simultaneously a lot of work on
partitions management remains on users: create inherited tables, writing trigger
which selects appropriate partition for row inserting etc.  In order to automate
this work pg_partman extension was written.  Also, there is upcoming work on
<a href="http://www.postgresql.org/message-id/flat/55D3093C.5010800@lab.ntt.co.jp">declarative partitioning</a>
by Amit Langote for PostgreSQL core.</p>

<p>In Postgres Professional we notice performance problem of inheritance based
partitioning.  The problem is that planner selects children tables compatible
with query by linear scan.  Thus, for query which selects just one row from one
partition it would be much slower to plan than to execute.  This fact
discourages many users and this is why we’re working on new PostgreSQL
extension: <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a>.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> caches partitions
meta-information and uses set_rel_pathlist hook in order to replace mechanism of
child tables selection by its own mechanism.  Thanks to this binary search
algorithm over sorted array is used for range partitioning and hash table
lookup for hash partitioning.  Therefore, time spent to partition selection
appears to be negligible in comparison with forming of result plan nodes.  See
<a href="http://www.postgrespro.com/blog/pgsql/pg_pathman">postgrespro blog post</a> for
performance benchmarks.</p>

<p><a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> now in beta-release
status and we encourage all interested users to try it and give us a feedback.
pg_pathman is compatible with PostgreSQL 9.5 and distributed under PostgreSQL
license.  In the future we’re planning to enhance functionality of pg_pathman
by following features.</p>

<ul>
  <li>Execute time selection of partitions using custom nodes (useful for nested
loops and prepared statements);</li>
  <li>Optimization of ordering output from partitioned tables (useful for merge
join and order by);</li>
  <li>Optimization of hash join when both tables are partitioned by join key;</li>
  <li>LIST-partitioning;</li>
  <li>HASH-partitioning by attributes of any hashable type.</li>
</ul>

<p>Despite we have pg_pathman useful here and now, we want this functionality to
eventually become part of PostgreSQL core.  This is why we are going to join
work on declarative partitioning by Amit Langote which have excellent DDL
infrastructure and fulfill it with effective internal algorithms.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Benchmark | Alexander Korotkov's blog]]></title>
  <link href="https://akorotkov.github.io/blog/categories/benchmark/atom.xml" rel="self"/>
  <link href="https://akorotkov.github.io/"/>
  <updated>2021-05-06T18:15:32+03:00</updated>
  <id>https://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PostgreSQL Scalability: Towards Millions TPS]]></title>
    <link href="https://akorotkov.github.io/blog/2016/05/09/scalability-towards-millions-tps/"/>
    <updated>2016-05-09T12:50:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2016/05/09/scalability-towards-millions-tps</id>
    <content type="html"><![CDATA[<p>PostgreSQL scalability on multicore and multisocket machines became a subject
of optimization long time ago once such machines became widely used.
<a href="http://suckit.blog.hu/2009/09/29/postgresql_history">This blog post</a> shows
brief history of vertical scalability improvements between versions 8.0 and 8.4.
PostgreSQL 9.2 had very noticeable scalability improvement.  Thanks to fast
path locking and other optimizations it becomes possible to achieve
<a href="http://rhaas.blogspot.ru/2012/04/did-i-say-32-cores-how-about-64.html">more than 350 000 TPS in select-only pgbench test</a>.  The latest stable release PostgreSQL 9.5 also
contain significant scalability advancements including LWLock improvement which
allows achieving <a href="http://amitkapila16.blogspot.ru/2015/01/read-scalability-in-postgresql-95.html">about 400 000 TPS in select-only pgbench test</a>.</p>

<p>Postgres Professional company also became involved into scalability
optimization.  In partnership with IBM we researched PostgreSQL scalability on
modern Power8 servers.  The results of this research was published in
<a href="https://habrahabr.ru/company/postgrespro/blog/270827/">popular Russian blog habrahabr</a>
(<a href="https://translate.google.com/translate?sl=ru&amp;tl=en&amp;js=y&amp;prev=_t&amp;hl=ru&amp;ie=UTF-8&amp;u=https%3A%2F%2Fhabrahabr.ru%2Fcompany%2Fpostgrespro%2Fblog%2F270827%2F&amp;edit-text=&amp;act=url">Google translated version</a>).
As brief result of this research we identify two ways to improve PostgreSQL
scalability on Power8:</p>

<ol>
  <li>Implement Pin/UnpinBuffer() using CAS operations instead of
buffer header spinlock;</li>
  <li>Optimize LWLockAttemptLock() in assembly to make fewer loops for changing
lwlock state.</li>
</ol>

<p>The optimization #1 appears to give huge benefit on big Intel servers as well,
while optimization #2 is Power-specific.  After long rounds of optimization,
cleaning and testing #1 was finally
<a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=48354581">committed by Andres Freund</a>.</p>

<p><img class="no-border center 2x" src="/images/scalability.png" width="720" height="576"></p>

<!--more-->

<p>On the graph above, following PostgreSQL versions were compared:</p>

<ol>
  <li>9.5.2 release – peak is 540 000 TPS with 60 clients,</li>
  <li>9.6 master (more precisely <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=59455018">59455018</a>) – peak is 1 064 000 TPS
with 110 clients,</li>
  <li>9.6 master where all PGXACTs were full cacheline aligned – peak is
1 722 000 TPS with 200 clients.</li>
</ol>

<p>Alignment issues worth some explanation.  Initially, I complained performance
regression introduced by commit <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=5364b357">5364b357</a> which increases number of
clog buffers.  That was strange by itself, because read-only benchmark shouldn’t
lookup to clog thanks to hint bits.  As expected it appears that clog buffers
don’t really affect read-only performance directly, <a href="http://git.postgresql.org/gitweb/?p=postgresql.git;a=commitdiff;h=5364b357">5364b357</a> just
changed layout of shared memory structures.</p>

<p>It appears that read-only benchmark became very sensitive to layout of shared
memory structures. As result performance has significant variety depending on
shared_buffers, max_connections and other options which influence shared memory
distribution.  When I gave Andres access to that big machine, he very quickly
find a way to take care about performance irregularity:
<a href="http://www.postgresql.org/message-id/20160411214029.ce3fw6zxim5k6a2r@alap3.anarazel.de">make all PGXACTs full cacheline aligned</a>.
Without this patch SnapshotResetXmin() dirties processor cache containing
multiple PGXACTs.  With this patch SnapshotResetXmin() dirties cacheline with
only single PGXACT.  Thus, GetSnapshotData() have much less cache misses.
That was surprising and good lesson for me.  I knew that alignment influence
performance, but I didn’t expect this influence to be so huge. PGXACT cacheline
alignment issue was discovered after feature freeze for 9.6.  That
means it would be subject for 9.7 development.  Nevertheless, 9.6 have very
noticeable scalability improvement.</p>

<p>Therefore, PostgreSQL single instance delivers more than 1 million TPS and one
could say, that PostgreSQL opens a new era of millions TPS.</p>

<p>P.S. I’d like to thank:</p>

<ul>
  <li>Andres Freund, so-author and committer of patch;</li>
  <li>My PostgresPro colleagues: Dmitry Vasilyev who run a lot of benchmarks,
YUriy Zhuravlev who wrote original proof of concept of this patch;</li>
  <li>Dilip Kumar and Robert Haas who helped with testing.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pg_pathman UPDATE and DELETE Support and Benchmark]]></title>
    <link href="https://akorotkov.github.io/blog/2016/03/18/pg_pathman-update-delete-benchmark/"/>
    <updated>2016-03-18T12:20:00+03:00</updated>
    <id>https://akorotkov.github.io/blog/2016/03/18/pg_pathman-update-delete-benchmark</id>
    <content type="html"><![CDATA[<p>Recently <a href="https://github.com/postgrespro/pg_pathman">pg_pathman</a> receives
support of UPDATE and DELETE queries.  Because of some specialties of PostgreSQL
query planner hooks, UPDATE and DELETE planning is accelerated only when only
one partition is touched by query.  Other way, regular slow inheritance query 
planning is used.  However, case when UPDATE and DELETE touches only one
partition seems to be most common and most needing optimization.</p>

<p>Also, I’d like to share some benchmark. This benchmark consists of operations
on journal table with about 1 M records for year partitioned by day.  For sure,
this is kind of toy example, because nobody will split so small amount of data
into so many partitions.  But it is still good to see partitioning overhead.
Performance of following operations was compared:</p>

<ul>
  <li>Select single row by its timestamp,</li>
  <li>Select data for whole day (whole one partition),</li>
  <li>Insert one row with random timestamp,</li>
  <li>Update one row with random timestamp.</li>
</ul>

<p>The following partitioning methods were compared:</p>

<ul>
  <li>Single table, no partitioning,</li>
  <li>pg_partman extension,</li>
  <li>pg_pathman extension.</li>
</ul>

<p>Benchmarks were done on 2 x Intel Xeon CPU X5675 @ 3.07GHz, 24 GB of memory
server with fsync = off in 10 threads. See the results below.</p>

<p><img class="no-border" src="/images/pg_pathman_benchmarks.png" width="676" height="445"></p>

<table>
  <thead>
    <tr>
      <th>Test name</th>
      <th style="text-align: right">single table, TPS</th>
      <th style="text-align: right">pg_partman, TPS</th>
      <th style="text-align: right">pg_pathman, TPS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Select one row</td>
      <td style="text-align: right">47973</td>
      <td style="text-align: right">1084</td>
      <td style="text-align: right">41775</td>
    </tr>
    <tr>
      <td>Select whole one partition</td>
      <td style="text-align: right">2302</td>
      <td style="text-align: right">704</td>
      <td style="text-align: right">2556</td>
    </tr>
    <tr>
      <td>Insert one row</td>
      <td style="text-align: right">34401</td>
      <td style="text-align: right">7969</td>
      <td style="text-align: right">25859</td>
    </tr>
    <tr>
      <td>Update one row</td>
      <td style="text-align: right">32769</td>
      <td style="text-align: right">202</td>
      <td style="text-align: right">29289</td>
    </tr>
  </tbody>
</table>

<!--more-->

<p>I can make following highlights for these results.</p>

<ul>
  <li>pg_pathman is dramatically faster than pg_partman, because pg_pathman uses
planner hooks for faster query planning while pg_partman uses built-in
inheritance mechanism.</li>
  <li>When selecting or updating a single row, pg_pathman is almost as fast as plain
table.  The difference for insertion of single row is slightly bigger because
trigger is used for that.</li>
  <li>The difference between pg_partman and pg_pathman when selecting the whole
partition is not as dramatic as when selecting the one row.  This is why
planning time becomes less substantial in comparison with execution time.</li>
  <li>Inserting random rows with pg_pathman is still much faster than with
pg_partman while both of them use trigger on parent relation.  However,
pg_pathman uses fast C-function for partition selection.</li>
  <li>Selecting the whole partition when table is partitioned by pg_pathman is
slightly faster than selecting same rows from plain table.  This is because
sequential scan was used for selecting whole partition while index scan
was used for selecting part of plain table.  When among of data is big and
doesn’t fit cache this difference is expected to be much more.</li>
</ul>

<p>See <a href="https://gist.github.com/akorotkov/0d558a6e1b5ea176813a">this gist</a> for
SQL-scripts used for benchmarking.</p>

<ul>
  <li>create_*.sql creates journal table using various partitioning methods.</li>
  <li>select_one.sql, select_day.sql, insert.sql and update.sql are pg_bench
scripts.</li>
</ul>

<p>P.S. This post is not a criticism of pg_partman.  It was developed long time
before extendability mechanisms which pg_pathman use were created.  And it is
a great extension which has served many years.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Stats | Alexander Korotkov's blog]]></title>
  <link href="http://akorotkov.github.io/blog/categories/stats/atom.xml" rel="self"/>
  <link href="http://akorotkov.github.io/"/>
  <updated>2018-05-22T01:58:01+03:00</updated>
  <id>http://akorotkov.github.io/</id>
  <author>
    <name><![CDATA[Alexander Korotkov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ALTER INDEX ... SET STATISTICS ...???]]></title>
    <link href="http://akorotkov.github.io/blog/2017/05/31/alter-index-weird/"/>
    <updated>2017-05-31T18:20:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2017/05/31/alter-index-weird</id>
    <content type="html"><![CDATA[<p>It’s not very widely known, but PostgreSQL is gathering statistics for indexed expressions.  See following example.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">test</span> <span class="k">AS</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">random</span><span class="p">()</span> <span class="n">x</span><span class="p">,</span> <span class="n">random</span><span class="p">()</span> <span class="n">y</span> <span class="k">FROM</span> <span class="n">generate_series</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1000000</span><span class="p">));</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————–</span>
</span><span class='line'> <span class="n">Seq</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">20406</span><span class="p">.</span><span class="mi">00</span> <span class="k">rows</span><span class="o">=</span><span class="mi">333333</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">.</span><span class="mi">671</span><span class="p">..</span><span class="mi">113</span><span class="p">.</span><span class="mi">693</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Filter</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Rows</span> <span class="n">Removed</span> <span class="k">by</span> <span class="n">Filter</span><span class="p">:</span> <span class="mi">999944</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We created table with two columns <code>x</code> and <code>y</code> whose values are independently and uniformly distributed from 0 to 1.  Despite we analyze that table, PostgreSQL optimizer estimates selectivity of <code>x + y &lt; 0.01</code> qual as 1/3.  You can see that this estimation is not even close to reality: we actually selected 56 rows instead of 333333 rows estimated.  This estimation comes from a rough assumption that <code>&lt;</code> operator selects 1/3 of rows unless something more precise is known.  Of course, it could be possible for planner to do something better in this case.  For instance, it could try to calculate histogram for <code>x + y</code> from the separate histograms for <code>x</code> and <code>y</code>.  However, PostgreSQL optimizer doesn’t perform such costly and complex computations for now.</p>

<p>Situation changes once we define an index on <code>x + y</code>.</p>

<!--more-->

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">test_idx</span> <span class="k">ON</span> <span class="n">test</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">));</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                     <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">———————————————————————————————————————</span>
</span><span class='line'> <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">13</span><span class="p">.</span><span class="mi">39</span><span class="p">..</span><span class="mi">1838</span><span class="p">.</span><span class="mi">32</span> <span class="k">rows</span><span class="o">=</span><span class="mi">641</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">040</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">107</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">56</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">13</span><span class="p">.</span><span class="mi">23</span> <span class="k">rows</span><span class="o">=</span><span class="mi">641</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">028</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">028</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Besides index get used for this query, there is way more accurate estimate for the number of rows selected by <code>x + y &lt; 0.01</code>.  Estimation is improved because PostgreSQL is now gathering separate statistics for <code>x + y</code> expression.  You can check that by querying a system catalog.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_stats</span> <span class="k">WHERE</span> <span class="n">tablename</span> <span class="o">=</span> <span class="err">‘</span><span class="n">test_idx</span><span class="err">’</span><span class="p">;</span>
</span><span class='line'><span class="o">-</span><span class="p">[</span> <span class="n">RECORD</span> <span class="mi">1</span> <span class="p">]</span><span class="err">———</span><span class="o">-+</span><span class="err">——————————————————————————————————————————————–</span>
</span><span class='line'><span class="n">schemaname</span>             <span class="o">|</span> <span class="k">public</span>
</span><span class='line'><span class="n">tablename</span>              <span class="o">|</span> <span class="n">test_idx</span>
</span><span class='line'><span class="n">attname</span>                <span class="o">|</span> <span class="n">expr</span>
</span><span class='line'><span class="n">inherited</span>              <span class="o">|</span> <span class="n">f</span>
</span><span class='line'><span class="n">null_frac</span>              <span class="o">|</span> <span class="mi">0</span>
</span><span class='line'><span class="n">avg_width</span>              <span class="o">|</span> <span class="mi">8</span>
</span><span class='line'><span class="n">n_distinct</span>             <span class="o">|</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">999863</span>
</span><span class='line'><span class="n">most_common_vals</span>       <span class="o">|</span> <span class="err">{</span><span class="mi">0</span><span class="p">.</span><span class="mi">262215601745993</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">319712610449642</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">3959802063182</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">404356196057051</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">40578526025638</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">437070866115391</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">462984828744084</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">4651908758096</span>
</span><span class='line'><span class="n">most_common_freqs</span>      <span class="o">|</span> <span class="err">{</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span><span class="mi">2</span><span class="n">e</span><span class="o">-</span><span class="mi">06</span><span class="p">,</span>
</span><span class='line'><span class="n">histogram_bounds</span>       <span class="o">|</span> <span class="err">{</span><span class="mi">0</span><span class="p">.</span><span class="mi">00104234321042895</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0141074191778898</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0200657406821847</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0247588600032032</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0284962640143931</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0315022920258343</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">0346860070712864</span><span class="p">,</span><span class="mi">0</span><span class="p">.</span><span class="mi">03</span>
</span><span class='line'><span class="n">correlation</span>            <span class="o">|</span> <span class="o">-</span><span class="mi">0</span><span class="p">.</span><span class="mi">00176553</span>
</span><span class='line'><span class="n">most_common_elems</span>      <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="n">most_common_elem_freqs</span> <span class="o">|</span> <span class="k">NULL</span>
</span><span class='line'><span class="n">elem_count_histogram</span>   <span class="o">|</span> <span class="k">NULL</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>So, there are histogram, most common values and etc for <code>x + y</code> expression, and that leads to more accurate selectivity estimation for <code>x + y &lt; 0.01</code>.  However, there is still and 1 order of degree error (641 rows estimated instead of 56).  Could we improve that?  Yes, PostgreSQL have statistics-gathering target parameter which is tunable per column using <a href="https://www.postgresql.org/docs/current/static/sql-altertable.html">ALTER TABLE … SET STATISTICS …</a> command.  Using this command, you may tune size of statistics arrays.</p>

<p>But, uhhhh, in our case we have no column, we have an indexed expression.  That appears to be a problem since there is no documented way to tune statistic target for that…</p>

<p>Nevertheless, it appears to be possible.  There is a gotcha which allows advanced DBAs to do that.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">ALTER</span> <span class="k">INDEX</span> <span class="n">test_idx</span> <span class="k">ALTER</span> <span class="k">COLUMN</span> <span class="n">expr</span> <span class="k">SET</span> <span class="k">STATISTICS</span> <span class="mi">10000</span><span class="p">;</span>
</span><span class='line'><span class="k">ANALYZE</span> <span class="n">test</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">EXPLAIN</span> <span class="k">ANALYZE</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span> <span class="k">WHERE</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="p">;</span>
</span><span class='line'>                                                    <span class="n">QUERY</span> <span class="n">PLAN</span>
</span><span class='line'><span class="err">——————————————————————————————————————</span><span class="o">-</span>
</span><span class='line'> <span class="n">Bitmap</span> <span class="n">Heap</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">4</span><span class="p">.</span><span class="mi">96</span><span class="p">..</span><span class="mi">258</span><span class="p">.</span><span class="mi">61</span> <span class="k">rows</span><span class="o">=</span><span class="mi">69</span> <span class="n">width</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">022</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">074</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>   <span class="k">Recheck</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span><span class='line'>   <span class="n">Heap</span> <span class="n">Blocks</span><span class="p">:</span> <span class="n">exact</span><span class="o">=</span><span class="mi">56</span>
</span><span class='line'>   <span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span>  <span class="n">Bitmap</span> <span class="k">Index</span> <span class="n">Scan</span> <span class="k">on</span> <span class="n">test_idx</span>  <span class="p">(</span><span class="n">cost</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span><span class="p">..</span><span class="mi">4</span><span class="p">.</span><span class="mi">94</span> <span class="k">rows</span><span class="o">=</span><span class="mi">69</span> <span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="n">actual</span> <span class="n">time</span><span class="o">=</span><span class="mi">0</span><span class="p">.</span><span class="mi">014</span><span class="p">..</span><span class="mi">0</span><span class="p">.</span><span class="mi">014</span> <span class="k">rows</span><span class="o">=</span><span class="mi">56</span> <span class="n">loops</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>         <span class="k">Index</span> <span class="n">Cond</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="err">‘</span><span class="mi">0</span><span class="p">.</span><span class="mi">01</span><span class="err">’</span><span class="p">::</span><span class="n">double</span> <span class="k">precision</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>That works.  When we collect statistic arrays of 10000 size, estimate becomes 69 rows.  It’s only 23% estimation error which is more than good enough for query planning.</p>

<p>But… What the hell is <code>ALTER INDEX ... SET STATISTICS ...</code>?!  There is nothing like this in PostgreSQL documentation!</p>

<p>Let’s understand this situation step by step.</p>

<ol>
  <li><code>ALTER INDEX</code> and <code>ALTER TABLE</code> share the same bison rule.</li>
  <li>Cases when <code>ALTER INDEX</code> is not applicable are filtered runtime.</li>
  <li><code>ALTER INDEX ... SET STATISTICS ...</code> is not forbidden and works the same way as <code>ALTER TABLE ... SET STATISTICS ...</code> does.</li>
  <li>Indexed expressions are internally named as attributes: <code>expr</code>, <code>expr1</code>, <code>expr2</code> …</li>
</ol>

<p>There was <a href="http://www.postgresql.org/message-id/flat/3677.1437057873%40sss.pgh.pa.us">some short discussion</a> about that in pgsql-hackers mailing lists.  The conclusion was that this should be documented, but it’s not yet done.  I also think that we should invent some better syntax for that instead of usage of internal column names.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts About Jsonb Statistics]]></title>
    <link href="http://akorotkov.github.io/blog/2015/09/07/jsonb_statistics/"/>
    <updated>2015-09-07T11:30:00+03:00</updated>
    <id>http://akorotkov.github.io/blog/2015/09/07/jsonb_statistics</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Users of jsonb datatype frequently complaint that it lucks of statistics.
Naturally, today jsonb statistics is just default scalar statistics, which is
suitable for <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>&gt;=</code>, <code>&gt;</code> operators selectivity estimation. But
people search jsonb documents using <code>@&gt;</code> operator, expressions with <code>-&gt;</code>
operator, jsquery etc. This is why selectivity estimation, which people
typically get in their queries, is just a stub. This could lead wrong query plans
and bad performance. And it made us introduce hints in jsquery extension.</p>

<p>Thus, problem is clear. But the right solution is still unclear, at least for
me. Let me discuss evident approaches to jsonb statistics and their limitations.</p>

<!--more-->

<h2 id="collect-just-frequent-paths">Collect just frequent paths</h2>

<p>First candidate for good selectivity estimation is <code>@&gt;</code> operator. Really,
<code>@&gt;</code> is builtin operator with GIN index support. First idea that comes into
mind is to collect most frequent paths and their frequencies as jsonb
statistics. In order to understand idea of paths better let’s consider how GIN
jsonb_path_ops works. jsonb_path_ops is builtin GIN operator class, which is
most suitable for jsonb <code>@&gt;</code> operator.</p>

<p>Path is a sequence of key names, array indexes and referenced value.
For instance, the document 
<code>{"a": [{"b": "xyz", "c": true}, 10], "d": {"e": [7, false]}}</code>
would be decomposed into following set of paths.</p>

<p><code>
"a".#."b"."xyz"
"a".#."c".true
"a".#.10
"d"."e".#.7
"d"."e".#.false
</code></p>

<p>In this representation of paths array indexes are replaced with <code>#</code>. That
allows our search to be agnostic to them like <code>@&gt;</code> operator does. Thus, when we
have such decomposition we can say that if <code>a @&gt; b</code> then <code>a</code> paths are superset
of <code>b</code> paths. If we intersect posting list of search argument paths then we can
get list of candidates for search result. This is how jsonb_path_ops works.</p>

<p>The same idea could be applied to jsonb statistics. We could decompose each
jsonb document into set of paths and then collect frequencies of most common
individual paths. Such statistics perfectly fits current PostgreSQL system
catalog and looks very similar to statistics of tsvectors and arrays, which are
decomposed into lexemes and elements correspondingly. Such statistics of most
common paths could look like following table.</p>

<table>
  <thead>
    <tr>
      <th>Path</th>
      <th style="text-align: right">Frequency</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>“a”.#.”b”.”xyz”</td>
      <td style="text-align: right">0.55</td>
    </tr>
    <tr>
      <td>“d”.”e”.#.77</td>
      <td style="text-align: right">0.43</td>
    </tr>
    <tr>
      <td>“a”.#.”b”.”def”</td>
      <td style="text-align: right">0.35</td>
    </tr>
    <tr>
      <td>“d”.”e”.#.100</td>
      <td style="text-align: right">0.22</td>
    </tr>
    <tr>
      <td>“d”.”f”.true</td>
      <td style="text-align: right">0.1</td>
    </tr>
  </tbody>
</table>

<p>Having such statistics we can estimate selectivity of <code>@&gt;</code> operator as product
of frequencies of search argument paths. For paths, which are not in most
common list, we can use some default “rare frequency”. Also, we use quite rough
assumption that paths appearance is independent. Let’s be honest: this
assumption is just wrong. However, this is typical assumption we have to use
during query planning. Finally, we don’t need absolutely accurate cost. Match of
magnitude order can be considered as a quite good result.</p>

<p>There is also another source or inaccuracy I’d like to mention. Let’s consider
some example.</p>

<p><code>
a = [{"x": [1]}, {"x": [2]}]
b = [{"x": [1,2]}]
</code></p>

<p>Both <code>a</code> and <code>b</code> are decomposed into the same set of paths.</p>

<p><code>
#."x".1
#."x".2
</code></p>

<p>However, neither <code>a @&gt; b</code> neither ‘b @&gt; a’. Since we ignored array indexes in
paths we also ignore whether values beholds to same array element or not. This
leads also to false positives in GIN and overestimations by statistics.</p>

<p>This approach is not only limited by <code>@&gt;</code> operator. We can produce estimation
for queries with complex logic. Example in jsquery could be <code>"(abc" = 1 OR
"xyz".# = "hij") AND NOT "def" = false</code>.</p>

<p>However, such statistics hardly can estimate selectivity of <code>&lt;</code>, <code>&lt;=</code>,
<code>&gt;=</code>, <code>&gt;</code> operators over jsonb values. For instance, in order to estimate
jsquery <code>"x" &gt; 1</code> we can only count most common paths, which match this
condition. But we’re lacking of histograms. It is a serious obstacle in getting
accurate estimates and it lets us search for better solution.</p>

<h2 id="collect-scalar-statistics-for-each-key-path">Collect scalar statistics for each key path</h2>

<p>Another idea of jsonb statistics we can get from assumption that almost every
“schemaless” dataset can be easily represented in the schema of tables. Assuming
this we would like our selectivity estimates for search in jsonb documents to be
as good as those for search in plain tables.</p>

<p>Let’s consider this on the example. The following json document could represent
the information about order in e-commerce.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">“id”:</span> <span class="err">1,</span>
</span><span class='line'>  <span class="err">“contact”:</span> <span class="err">“John</span> <span class="err">Smith”,</span>
</span><span class='line'>  <span class="err">“phone”:</span> <span class="err">“212</span> <span class="err">555-1234”,</span>
</span><span class='line'>  <span class="err">“address”:</span> <span class="err">“10021-3100,</span> <span class="err">21</span> <span class="err">2nd</span> <span class="err">Street,</span> <span class="err">New</span> <span class="err">York”,</span>
</span><span class='line'>  <span class="err">“products”:</span>
</span><span class='line'>  <span class="err">[</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">“article”:</span> <span class="err">“XF56120”,</span>
</span><span class='line'>      <span class="err">“name”:</span> <span class="err">“Sunglasses”,</span>
</span><span class='line'>      <span class="err">“price”:</span> <span class="err">500,</span>
</span><span class='line'>      <span class="err">“quantity”:</span> <span class="err">1</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">“article”:</span> <span class="err">“AT10789”,</span>
</span><span class='line'>      <span class="err">“name”:</span> <span class="err">“T-Shirt”,</span>
</span><span class='line'>      <span class="err">“price”:</span> <span class="err">100,</span>
</span><span class='line'>      <span class="err">“quantity”:</span> <span class="err">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The same information could be represented in the following couple of tables.</p>

<table>
  <thead>
    <tr>
      <th>id</th>
      <th>contact</th>
      <th>phone</th>
      <th>address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>John Smith</td>
      <td>212 555-1234</td>
      <td>10021-3100, 21 2nd Street, New York</td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th>order_id</th>
      <th>article</th>
      <th>name</th>
      <th style="text-align: right">price</th>
      <th style="text-align: right">quantity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>XF56120</td>
      <td>Sunglasses</td>
      <td style="text-align: right">500</td>
      <td style="text-align: right">1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>AT10789</td>
      <td>T-Shirt</td>
      <td style="text-align: right">100</td>
      <td style="text-align: right">2</td>
    </tr>
  </tbody>
</table>

<p>What kind of statictis would be collected by PostgreSQL in the second case? It
would be most common values and histogram for each attribute. Most common values
(MCVs) are values, which occur in the column most frequently. Frequencies of those
values are collected and stored as well. Histogram is described by array of
bounds. Each bound is assumed to contain equal number of column values
excluding MCVs (so called equi-depth histogram).</p>

<p>With some simplification such statistics could be represented in the following
table.</p>

<table>
  <thead>
    <tr>
      <th>Table</th>
      <th>Attribute</th>
      <th>Most common values</th>
      <th>Histogram</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>order</td>
      <td>contact</td>
      <td>{“John Smith”: 0.05, “James Johnson”: 0.01}</td>
      <td>[“Anthony Anderson”, “Lisa Baker”, “Sandra Phillips”]</td>
    </tr>
    <tr>
      <td>product</td>
      <td>price</td>
      <td>{“100”: 0.1, “10”: 0.08, “50”: 0.05, “150”: 0.03}</td>
      <td>[0, 12.5, 45.5, 250, 1000]</td>
    </tr>
    <tr>
      <td>product</td>
      <td>quantity</td>
      <td>{“1”: 0.5, “2”: 0.2, “3”: 0.05, “5”: 0.01}</td>
      <td>[0, 4, 7, 9, 10]</td>
    </tr>
    <tr>
      <td>…….</td>
      <td>………</td>
      <td>………………………………………….</td>
      <td>……………………………………………..</td>
    </tr>
  </tbody>
</table>

<p>What if we replace table and attribute with path of keys where corresponding
value could be found in json document?</p>

<table>
  <thead>
    <tr>
      <th>Key path</th>
      <th>Most common values</th>
      <th>Histogram</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>contact</td>
      <td>{“John Smith”: 0.05, “James Johnson”: 0.01}</td>
      <td>[“Anthony Anderson”, “Lisa Baker”, “Sandra Phillips”]</td>
    </tr>
    <tr>
      <td>products.#.price</td>
      <td>{“100”: 0.1, “10”: 0.08, “50”: 0.05, “150”: 0.03}</td>
      <td>[0, 12.5, 45.5, 250, 1000]</td>
    </tr>
    <tr>
      <td>products.#.quantity</td>
      <td>{“1”: 0.5, “2”: 0.2, “3”: 0.05, “5”: 0.01}</td>
      <td>[0, 4, 7, 9, 10]</td>
    </tr>
    <tr>
      <td>……………….</td>
      <td>………………………………………….</td>
      <td>……………………………………………..</td>
    </tr>
  </tbody>
</table>

<p>This kind of statistics seems to be comprehensive enough. It could produce fine
estimations for queries like <code>products.#.price &gt; 100</code>.</p>

<p>However, there are still bunch of open problems here.</p>

<ul>
  <li>
    <p>Typical json documents we can meet in applications are really well structured
as an example above. However, there are some cases when they are not. At
first, someone could easily put values into keys. Let me illustrate this on
the following example: <code>products</code> becomes an object where article is used as
a key.</p>

    <p>In this case we can find that cardinality of key paths are very high. Thus,
we would be unable to collect suitable statistics for each key path.
However, we could consider such situation as user mistake. Then we should
advise users to restructure their documents.</p>

    <p>There are still kind of documents, which don’t fit this model not because of
user mistake but because of their nature. Imagine json formatted query plans
stored in the table. Plans could have unlimited levels of nesting and
correspondingly cardinality of key paths could be very high.</p>
  </li>
</ul>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">“id”:</span> <span class="err">1,</span>
</span><span class='line'>  <span class="err">“contact”:</span> <span class="err">“John</span> <span class="err">Smith”,</span>
</span><span class='line'>  <span class="err">“phone”:</span> <span class="err">“212</span> <span class="err">555-1234”,</span>
</span><span class='line'>  <span class="err">“address”:</span> <span class="err">“10021-3100,</span> <span class="err">21</span> <span class="err">2nd</span> <span class="err">Street,</span> <span class="err">New</span> <span class="err">York”,</span>
</span><span class='line'>  <span class="err">“products”:</span>
</span><span class='line'>  <span class="err">{</span>
</span><span class='line'>    <span class="err">“XF56120”:</span>
</span><span class='line'>    <span class="err">{</span>
</span><span class='line'>      <span class="err">“name”:</span> <span class="err">“Sunglasses”,</span>
</span><span class='line'>      <span class="err">“price”:</span> <span class="err">500,</span>
</span><span class='line'>      <span class="err">“quantity”:</span> <span class="err">1</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">“AT</span><span class="mi">10789</span><span class="err">”:</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="err">“name”:</span> <span class="err">“T-Shirt”,</span>
</span><span class='line'>      <span class="err">“price”:</span> <span class="err">100,</span>
</span><span class='line'>      <span class="err">“quantity”:</span> <span class="err">2</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="err">}</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<ul>
  <li>
    <p>Some objects stored inside jsonb documents could require special statistics.
For instance, point coordinates could be represented in json as
<code>{"x": 11.3, "y": 27.0}</code>. But statistics we will need in this case is not
separate statistics for <code>x</code> and <code>y</code>. We would need something special for
geometrical objects like 2D-histograms.</p>
  </li>
  <li>
    <p>Another problem is fitting this model into PostgreSQL system catalog.
<code>pg_statistic</code> assumes that statistics of attribute is represented by few
arrays. However, in this model we have to store few arrays per each key
path. For sure, we do a trick by storing array of jsonb or something like
this, but that would be a kluge. It would be nice to store each key path in
the separate row of <code>pg_statistic</code>. This would require significant changes
in statistics handling though.</p>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>This was just my current thoughts about jsonb statistics. Probably, someone come
with much better ideas. But I’m not sure we can find ideal solution, which
would fit everyone needs. We can see that current developments in
multivariate  statistics use pluggable approach: user can turn on specific
method on specific set of column. We could end up with something similar for
jsonb: simple basic statistics + various kinds of pluggable statistics for
specific needs.</p>
]]></content>
  </entry>
  
</feed>
